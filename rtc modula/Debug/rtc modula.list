
rtc modula.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002c98  08002c98  00012c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d4c  08002d4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d54  08002d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000070  08002dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002dcc  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000544f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000137f  00000000  00000000  000254ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a8  00000000  00000000  00026870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00026e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165d2  00000000  00000000  00027308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000069c7  00000000  00000000  0003d8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000894d5  00000000  00000000  000442a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce4  00000000  00000000  000cd7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002c80 	.word	0x08002c80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002c80 	.word	0x08002c80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
static void MX_GPIO_Init(void);
static void MX_RTC_Init(void);


int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  HAL_Init();
 800058a:	f000 fa7b 	bl	8000a84 <HAL_Init>

  SystemClock_Config();
 800058e:	f000 f823 	bl	80005d8 <SystemClock_Config>



  /* init fonks */
  MX_GPIO_Init();
 8000592:	f000 f8dd 	bl	8000750 <MX_GPIO_Init>
  MX_RTC_Init();
 8000596:	f000 f881 	bl	800069c <MX_RTC_Init>

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800059a:	2200      	movs	r2, #0
 800059c:	490b      	ldr	r1, [pc, #44]	; (80005cc <main+0x48>)
 800059e:	480c      	ldr	r0, [pc, #48]	; (80005d0 <main+0x4c>)
 80005a0:	f001 fa0e 	bl	80019c0 <HAL_RTC_GetTime>
	     // to get hours use -- gTime.Hours
	     // to get minutes use -- gTime.Minutes
	     // to get s econds use -- gTime.Seconds
	  int saat,dakika,saniye;
	  saat=gTime.Hours;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <main+0x48>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	60fb      	str	r3, [r7, #12]
	  dakika=gTime.Minutes;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <main+0x48>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	60bb      	str	r3, [r7, #8]
	  saniye=gTime.Seconds;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <main+0x48>)
 80005b2:	789b      	ldrb	r3, [r3, #2]
 80005b4:	607b      	str	r3, [r7, #4]
	  printf("%d,%d,%d",saat,dakika,saniye);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	68f9      	ldr	r1, [r7, #12]
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0x50>)
 80005be:	f001 fbd1 	bl	8001d64 <iprintf>

	     HAL_Delay(500);
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f000 facf 	bl	8000b68 <HAL_Delay>
  {
 80005ca:	e7e6      	b.n	800059a <main+0x16>
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	08002c98 	.word	0x08002c98

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fbb4 	bl	8001d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <SystemClock_Config+0xbc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a23      	ldr	r2, [pc, #140]	; (8000694 <SystemClock_Config+0xbc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <SystemClock_Config+0xbc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <SystemClock_Config+0xc0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <SystemClock_Config+0xc0>)
 8000626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <SystemClock_Config+0xc0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000638:	230a      	movs	r3, #10
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fb93 	bl	8000d7c <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800065c:	f000 f8ae 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f000 fdf6 	bl	800126c <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000686:	f000 f899 	bl	80007bc <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	; 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_RTC_Init+0xac>)
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <MX_RTC_Init+0xb0>)
 80006b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_RTC_Init+0xac>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_RTC_Init+0xac>)
 80006c2:	227f      	movs	r2, #127	; 0x7f
 80006c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_RTC_Init+0xac>)
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_RTC_Init+0xac>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d2:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_RTC_Init+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_RTC_Init+0xac>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006de:	481a      	ldr	r0, [pc, #104]	; (8000748 <MX_RTC_Init+0xac>)
 80006e0:	f001 f85e 	bl	80017a0 <HAL_RTC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f867 	bl	80007bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 80006ee:	2323      	movs	r3, #35	; 0x23
 80006f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x25;
 80006f2:	2325      	movs	r3, #37	; 0x25
 80006f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x50;
 80006f6:	2350      	movs	r3, #80	; 0x50
 80006f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <MX_RTC_Init+0xac>)
 800070a:	f001 f8bf 	bl	800188c <HAL_RTC_SetTime>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 f852 	bl	80007bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000718:	2301      	movs	r3, #1
 800071a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 800071c:	2303      	movs	r3, #3
 800071e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x20;
 8000720:	2320      	movs	r3, #32
 8000722:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000724:	2300      	movs	r3, #0
 8000726:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_RTC_Init+0xac>)
 8000730:	f001 f9a4 	bl	8001a7c <HAL_RTC_SetDate>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800073a:	f000 f83f 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000008c 	.word	0x2000008c
 800074c:	40002800 	.word	0x40002800

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_GPIO_Init+0x68>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <MX_GPIO_Init+0x68>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_GPIO_Init+0x68>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_GPIO_Init+0x68>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <MX_GPIO_Init+0x68>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_GPIO_Init+0x68>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <MX_GPIO_Init+0x68>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_GPIO_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_RTC_MspInit+0x50>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d111      	bne.n	800085e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800083a:	2302      	movs	r3, #2
 800083c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800083e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000842:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4618      	mov	r0, r3
 800084a:	f000 febb 	bl	80015c4 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000854:	f7ff ffb2 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <HAL_RTC_MspInit+0x54>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40002800 	.word	0x40002800
 800086c:	42470e3c 	.word	0x42470e3c

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f934 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00a      	b.n	80008ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008d6:	f3af 8000 	nop.w
 80008da:	4601      	mov	r1, r0
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	60ba      	str	r2, [r7, #8]
 80008e2:	b2ca      	uxtb	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	dbf0      	blt.n	80008d6 <_read+0x12>
  }

  return len;
 80008f4:	687b      	ldr	r3, [r7, #4]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b086      	sub	sp, #24
 8000902:	af00      	add	r7, sp, #0
 8000904:	60f8      	str	r0, [r7, #12]
 8000906:	60b9      	str	r1, [r7, #8]
 8000908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	e009      	b.n	8000924 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf1      	blt.n	8000910 <_write+0x12>
  }
  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_close>:

int _close(int file)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095e:	605a      	str	r2, [r3, #4]
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <_isatty>:

int _isatty(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a8:	4a14      	ldr	r2, [pc, #80]	; (80009fc <_sbrk+0x5c>)
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <_sbrk+0x60>)
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d102      	bne.n	80009c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <_sbrk+0x64>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <_sbrk+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d207      	bcs.n	80009e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d0:	f001 f996 	bl	8001d00 <__errno>
 80009d4:	4603      	mov	r3, r0
 80009d6:	220c      	movs	r2, #12
 80009d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e009      	b.n	80009f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <_sbrk+0x64>)
 80009f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20010000 	.word	0x20010000
 8000a00:	00000400 	.word	0x00000400
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200000d8 	.word	0x200000d8

08000a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ffd7 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f001 f955 	bl	8001d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fd8f 	bl	8000584 <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a74:	08002d5c 	.word	0x08002d5c
  ldr r2, =_sbss
 8000a78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a7c:	200000d8 	.word	0x200000d8

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <HAL_Init+0x40>)
 8000a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_Init+0x40>)
 8000a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x40>)
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f931 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab2:	200f      	movs	r0, #15
 8000ab4:	f000 f808 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab8:	f7ff fe86 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023c00 	.word	0x40023c00

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_InitTick+0x54>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x58>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f93b 	bl	8000d62 <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00e      	b.n	8000b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d80a      	bhi.n	8000b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f911 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4a06      	ldr	r2, [pc, #24]	; (8000b24 <HAL_InitTick+0x5c>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	200000c4 	.word	0x200000c4

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200000c4 	.word	0x200000c4

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ffde 	bl	8000b50 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff47 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff5c 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffb0 	bl	8000cd0 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e267      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d075      	beq.n	8000e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d9a:	4b88      	ldr	r3, [pc, #544]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d00c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000da6:	4b85      	ldr	r3, [pc, #532]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d112      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000db2:	4b82      	ldr	r3, [pc, #520]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000dbe:	d10b      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	4b7e      	ldr	r3, [pc, #504]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d05b      	beq.n	8000e84 <HAL_RCC_OscConfig+0x108>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d157      	bne.n	8000e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e242      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de0:	d106      	bne.n	8000df0 <HAL_RCC_OscConfig+0x74>
 8000de2:	4b76      	ldr	r3, [pc, #472]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a75      	ldr	r2, [pc, #468]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e01d      	b.n	8000e2c <HAL_RCC_OscConfig+0xb0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x98>
 8000dfa:	4b70      	ldr	r3, [pc, #448]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a6f      	ldr	r2, [pc, #444]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b6d      	ldr	r3, [pc, #436]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6c      	ldr	r2, [pc, #432]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0xb0>
 8000e14:	4b69      	ldr	r3, [pc, #420]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a68      	ldr	r2, [pc, #416]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b66      	ldr	r3, [pc, #408]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a65      	ldr	r2, [pc, #404]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fe8c 	bl	8000b50 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fe88 	bl	8000b50 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e207      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	4b5b      	ldr	r3, [pc, #364]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0xc0>
 8000e5a:	e014      	b.n	8000e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fe78 	bl	8000b50 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fe74 	bl	8000b50 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1f3      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	4b51      	ldr	r3, [pc, #324]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0xe8>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d063      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d11c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000eaa:	4b44      	ldr	r3, [pc, #272]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d116      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4b41      	ldr	r3, [pc, #260]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x152>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d001      	beq.n	8000ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e1c7      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4937      	ldr	r1, [pc, #220]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e03a      	b.n	8000f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d020      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <HAL_RCC_OscConfig+0x244>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fe2d 	bl	8000b50 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fe29 	bl	8000b50 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e1a8      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4925      	ldr	r1, [pc, #148]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <HAL_RCC_OscConfig+0x244>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fe0c 	bl	8000b50 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fe08 	bl	8000b50 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e187      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d036      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d016      	beq.n	8000f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_RCC_OscConfig+0x248>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f74:	f7ff fdec 	bl	8000b50 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fde8 	bl	8000b50 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e167      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_RCC_OscConfig+0x240>)
 8000f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x200>
 8000f9a:	e01b      	b.n	8000fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_RCC_OscConfig+0x248>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fdd5 	bl	8000b50 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa8:	e00e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000faa:	f7ff fdd1 	bl	8000b50 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d907      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e150      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	42470000 	.word	0x42470000
 8000fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b88      	ldr	r3, [pc, #544]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8000fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1ea      	bne.n	8000faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 8097 	beq.w	8001110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b81      	ldr	r3, [pc, #516]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10f      	bne.n	8001012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a7c      	ldr	r2, [pc, #496]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100e:	2301      	movs	r3, #1
 8001010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b77      	ldr	r3, [pc, #476]	; (80011f0 <HAL_RCC_OscConfig+0x474>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d118      	bne.n	8001050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b74      	ldr	r3, [pc, #464]	; (80011f0 <HAL_RCC_OscConfig+0x474>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a73      	ldr	r2, [pc, #460]	; (80011f0 <HAL_RCC_OscConfig+0x474>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff fd91 	bl	8000b50 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001032:	f7ff fd8d 	bl	8000b50 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e10c      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <HAL_RCC_OscConfig+0x474>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x2ea>
 8001058:	4b64      	ldr	r3, [pc, #400]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800105a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105c:	4a63      	ldr	r2, [pc, #396]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6713      	str	r3, [r2, #112]	; 0x70
 8001064:	e01c      	b.n	80010a0 <HAL_RCC_OscConfig+0x324>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x30c>
 800106e:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001072:	4a5e      	ldr	r2, [pc, #376]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6713      	str	r3, [r2, #112]	; 0x70
 800107a:	4b5c      	ldr	r3, [pc, #368]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800107c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800107e:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6713      	str	r3, [r2, #112]	; 0x70
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0x324>
 8001088:	4b58      	ldr	r3, [pc, #352]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800108a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800108c:	4a57      	ldr	r2, [pc, #348]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800108e:	f023 0301 	bic.w	r3, r3, #1
 8001092:	6713      	str	r3, [r2, #112]	; 0x70
 8001094:	4b55      	ldr	r3, [pc, #340]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001098:	4a54      	ldr	r2, [pc, #336]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800109a:	f023 0304 	bic.w	r3, r3, #4
 800109e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d015      	beq.n	80010d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a8:	f7ff fd52 	bl	8000b50 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ae:	e00a      	b.n	80010c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b0:	f7ff fd4e 	bl	8000b50 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80010be:	4293      	cmp	r3, r2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e0cb      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 80010c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0ee      	beq.n	80010b0 <HAL_RCC_OscConfig+0x334>
 80010d2:	e014      	b.n	80010fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d4:	f7ff fd3c 	bl	8000b50 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010da:	e00a      	b.n	80010f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010dc:	f7ff fd38 	bl	8000b50 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e0b5      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f2:	4b3e      	ldr	r3, [pc, #248]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 80010f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1ee      	bne.n	80010dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d105      	bne.n	8001110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001104:	4b39      	ldr	r3, [pc, #228]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a38      	ldr	r2, [pc, #224]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800110a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a1 	beq.w	800125c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800111a:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b08      	cmp	r3, #8
 8001124:	d05c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d141      	bne.n	80011b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <HAL_RCC_OscConfig+0x478>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fd0c 	bl	8000b50 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800113c:	f7ff fd08 	bl	8000b50 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e087      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800114e:	4b27      	ldr	r3, [pc, #156]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69da      	ldr	r2, [r3, #28]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	3b01      	subs	r3, #1
 8001174:	041b      	lsls	r3, r3, #16
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	061b      	lsls	r3, r3, #24
 800117e:	491b      	ldr	r1, [pc, #108]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_RCC_OscConfig+0x478>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fce1 	bl	8000b50 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff fcdd 	bl	8000b50 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e05c      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x416>
 80011b0:	e054      	b.n	800125c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_RCC_OscConfig+0x478>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fcca 	bl	8000b50 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011c0:	f7ff fcc6 	bl	8000b50 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e045      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_RCC_OscConfig+0x470>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x444>
 80011de:	e03d      	b.n	800125c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d107      	bne.n	80011f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e038      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40007000 	.word	0x40007000
 80011f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_RCC_OscConfig+0x4ec>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d028      	beq.n	8001258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d121      	bne.n	8001258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d11a      	bne.n	8001258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001228:	4013      	ands	r3, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800122e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001230:	4293      	cmp	r3, r2
 8001232:	d111      	bne.n	8001258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	085b      	lsrs	r3, r3, #1
 8001240:	3b01      	subs	r3, #1
 8001242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d107      	bne.n	8001258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e0cc      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	4b68      	ldr	r3, [pc, #416]	; (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d90c      	bls.n	80012a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001296:	4b63      	ldr	r3, [pc, #396]	; (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d001      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0b8      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a58      	ldr	r2, [pc, #352]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d8:	4b53      	ldr	r3, [pc, #332]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	494d      	ldr	r1, [pc, #308]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d044      	beq.n	800138c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d119      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e07f      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d003      	beq.n	800132a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001326:	2b03      	cmp	r3, #3
 8001328:	d107      	bne.n	800133a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06f      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e067      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134a:	4b37      	ldr	r3, [pc, #220]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f023 0203 	bic.w	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4934      	ldr	r1, [pc, #208]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	4313      	orrs	r3, r2
 800135a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800135c:	f7ff fbf8 	bl	8000b50 <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	e00a      	b.n	800137a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001364:	f7ff fbf4 	bl	8000b50 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e04f      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137a:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 020c 	and.w	r2, r3, #12
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d1eb      	bne.n	8001364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d20c      	bcs.n	80013b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b20      	ldr	r3, [pc, #128]	; (8001424 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e032      	b.n	800141a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4916      	ldr	r1, [pc, #88]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f2:	f000 f821 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 80013f6:	4602      	mov	r2, r0
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	490a      	ldr	r1, [pc, #40]	; (800142c <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	5ccb      	ldrb	r3, [r1, r3]
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb58 	bl	8000ac8 <HAL_InitTick>

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c00 	.word	0x40023c00
 8001428:	40023800 	.word	0x40023800
 800142c:	08002ca4 	.word	0x08002ca4
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b090      	sub	sp, #64	; 0x40
 800143e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001448:	2300      	movs	r3, #0
 800144a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001450:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d00d      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x40>
 800145c:	2b08      	cmp	r3, #8
 800145e:	f200 80a1 	bhi.w	80015a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_RCC_GetSysClockFreq+0x34>
 8001466:	2b04      	cmp	r3, #4
 8001468:	d003      	beq.n	8001472 <HAL_RCC_GetSysClockFreq+0x3a>
 800146a:	e09b      	b.n	80015a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_GetSysClockFreq+0x184>)
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001470:	e09b      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001472:	4b53      	ldr	r3, [pc, #332]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001476:	e098      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001482:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d028      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	099b      	lsrs	r3, r3, #6
 8001494:	2200      	movs	r2, #0
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	627a      	str	r2, [r7, #36]	; 0x24
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80014a0:	2100      	movs	r1, #0
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80014a4:	fb03 f201 	mul.w	r2, r3, r1
 80014a8:	2300      	movs	r3, #0
 80014aa:	fb00 f303 	mul.w	r3, r0, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80014b2:	fba0 1202 	umull	r1, r2, r0, r2
 80014b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014b8:	460a      	mov	r2, r1
 80014ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80014bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014be:	4413      	add	r3, r2
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c4:	2200      	movs	r2, #0
 80014c6:	61bb      	str	r3, [r7, #24]
 80014c8:	61fa      	str	r2, [r7, #28]
 80014ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014d2:	f7fe fed5 	bl	8000280 <__aeabi_uldivmod>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4613      	mov	r3, r2
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014de:	e053      	b.n	8001588 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	2200      	movs	r2, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	617a      	str	r2, [r7, #20]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80014f2:	f04f 0b00 	mov.w	fp, #0
 80014f6:	4652      	mov	r2, sl
 80014f8:	465b      	mov	r3, fp
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001508:	0150      	lsls	r0, r2, #5
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	ebb2 080a 	subs.w	r8, r2, sl
 8001512:	eb63 090b 	sbc.w	r9, r3, fp
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001522:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001526:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800152a:	ebb2 0408 	subs.w	r4, r2, r8
 800152e:	eb63 0509 	sbc.w	r5, r3, r9
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	00eb      	lsls	r3, r5, #3
 800153c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001540:	00e2      	lsls	r2, r4, #3
 8001542:	4614      	mov	r4, r2
 8001544:	461d      	mov	r5, r3
 8001546:	eb14 030a 	adds.w	r3, r4, sl
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	eb45 030b 	adc.w	r3, r5, fp
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800155e:	4629      	mov	r1, r5
 8001560:	028b      	lsls	r3, r1, #10
 8001562:	4621      	mov	r1, r4
 8001564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001568:	4621      	mov	r1, r4
 800156a:	028a      	lsls	r2, r1, #10
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001572:	2200      	movs	r2, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	60fa      	str	r2, [r7, #12]
 8001578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800157c:	f7fe fe80 	bl	8000280 <__aeabi_uldivmod>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4613      	mov	r3, r2
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	0c1b      	lsrs	r3, r3, #16
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	3301      	adds	r3, #1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015a2:	e002      	b.n	80015aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_RCC_GetSysClockFreq+0x184>)
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3740      	adds	r7, #64	; 0x40
 80015b0:	46bd      	mov	sp, r7
 80015b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	00f42400 	.word	0x00f42400
 80015c0:	017d7840 	.word	0x017d7840

080015c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d035      	beq.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80015ec:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015f2:	f7ff faad 	bl	8000b50 <HAL_GetTick>
 80015f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80015fa:	f7ff faa9 	bl	8000b50 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0ba      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800160c:	4b60      	ldr	r3, [pc, #384]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	019a      	lsls	r2, r3, #6
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	071b      	lsls	r3, r3, #28
 8001624:	495a      	ldr	r1, [pc, #360]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001626:	4313      	orrs	r3, r2
 8001628:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800162c:	4b57      	ldr	r3, [pc, #348]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001632:	f7ff fa8d 	bl	8000b50 <HAL_GetTick>
 8001636:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800163a:	f7ff fa89 	bl	8000b50 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e09a      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8083 	beq.w	800176c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001682:	4b44      	ldr	r3, [pc, #272]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a43      	ldr	r2, [pc, #268]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800168e:	f7ff fa5f 	bl	8000b50 <HAL_GetTick>
 8001692:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fa5b 	bl	8000b50 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e06c      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016b4:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d02f      	beq.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d028      	beq.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d114      	bne.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa29 	bl	8000b50 <HAL_GetTick>
 80016fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff fa25 	bl	8000b50 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e034      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0ee      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800172c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001730:	d10d      	bne.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001746:	4912      	ldr	r1, [pc, #72]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
 800174c:	e005      	b.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001754:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001758:	6093      	str	r3, [r2, #8]
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800175c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001766:	490a      	ldr	r1, [pc, #40]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7c1a      	ldrb	r2, [r3, #16]
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800177e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	42470068 	.word	0x42470068
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000
 8001798:	42470e40 	.word	0x42470e40
 800179c:	424711e0 	.word	0x424711e0

080017a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e066      	b.n	8001884 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7f5b      	ldrb	r3, [r3, #29]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d105      	bne.n	80017cc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff f826 	bl	8000818 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	22ca      	movs	r2, #202	; 0xca
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2253      	movs	r2, #83	; 0x53
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f9f6 	bl	8001bd4 <RTC_EnterInitMode>
 80017e8:	4603      	mov	r3, r0
 80017ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d12c      	bne.n	800184c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001804:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6899      	ldr	r1, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	68d2      	ldr	r2, [r2, #12]
 800182c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6919      	ldr	r1, [r3, #16]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f9fd 	bl	8001c42 <RTC_ExitInitMode>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d113      	bne.n	800187a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	22ff      	movs	r2, #255	; 0xff
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	7f1b      	ldrb	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_RTC_SetTime+0x1c>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e087      	b.n	80019b8 <HAL_RTC_SetTime+0x12c>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2202      	movs	r2, #2
 80018b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d126      	bne.n	8001908 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2200      	movs	r2, #0
 80018cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f9da 	bl	8001c8c <RTC_ByteToBcd2>
 80018d8:	4603      	mov	r3, r0
 80018da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	785b      	ldrb	r3, [r3, #1]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f9d3 	bl	8001c8c <RTC_ByteToBcd2>
 80018e6:	4603      	mov	r3, r0
 80018e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80018ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	789b      	ldrb	r3, [r3, #2]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f9cb 	bl	8001c8c <RTC_ByteToBcd2>
 80018f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80018f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	78db      	ldrb	r3, [r3, #3]
 8001900:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e018      	b.n	800193a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2200      	movs	r2, #0
 800191a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001928:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800192e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	78db      	ldrb	r3, [r3, #3]
 8001934:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001936:	4313      	orrs	r3, r2
 8001938:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	22ca      	movs	r2, #202	; 0xca
 8001940:	625a      	str	r2, [r3, #36]	; 0x24
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2253      	movs	r2, #83	; 0x53
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f942 	bl	8001bd4 <RTC_EnterInitMode>
 8001950:	4603      	mov	r3, r0
 8001952:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001954:	7cfb      	ldrb	r3, [r7, #19]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d120      	bne.n	800199c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001964:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001968:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001978:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	431a      	orrs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f955 	bl	8001c42 <RTC_ExitInitMode>
 8001998:	4603      	mov	r3, r0
 800199a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800199c:	7cfb      	ldrb	r3, [r7, #19]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	22ff      	movs	r2, #255	; 0xff
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	771a      	strb	r2, [r3, #28]

  return status;
 80019b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}

080019c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80019f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80019f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	0d9b      	lsrs	r3, r3, #22
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11a      	bne.n	8001a72 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f940 	bl	8001cc6 <RTC_Bcd2ToByte>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f937 	bl	8001cc6 <RTC_Bcd2ToByte>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	789b      	ldrb	r3, [r3, #2]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 f92e 	bl	8001cc6 <RTC_Bcd2ToByte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	7f1b      	ldrb	r3, [r3, #28]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_RTC_SetDate+0x1c>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e071      	b.n	8001b7c <HAL_RTC_SetDate+0x100>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_RTC_SetDate+0x4c>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	785b      	ldrb	r3, [r3, #1]
 8001aba:	f023 0310 	bic.w	r3, r3, #16
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	330a      	adds	r3, #10
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11c      	bne.n	8001b08 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	78db      	ldrb	r3, [r3, #3]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f8da 	bl	8001c8c <RTC_ByteToBcd2>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f8d3 	bl	8001c8c <RTC_ByteToBcd2>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001aea:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f8cb 	bl	8001c8c <RTC_ByteToBcd2>
 8001af6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001af8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e00e      	b.n	8001b26 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	78db      	ldrb	r3, [r3, #3]
 8001b0c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001b14:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8001b1a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	22ca      	movs	r2, #202	; 0xca
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2253      	movs	r2, #83	; 0x53
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f84c 	bl	8001bd4 <RTC_EnterInitMode>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10c      	bne.n	8001b60 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001b54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f873 	bl	8001c42 <RTC_ExitInitMode>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	22ff      	movs	r2, #255	; 0xff
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	771a      	strb	r2, [r3, #28]

  return status;
 8001b7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba0:	f7fe ffd6 	bl	8000b50 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ba6:	e009      	b.n	8001bbc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ba8:	f7fe ffd2 	bl	8000b50 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb6:	d901      	bls.n	8001bbc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e007      	b.n	8001bcc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0320 	and.w	r3, r3, #32
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0ee      	beq.n	8001ba8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d122      	bne.n	8001c38 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c02:	f7fe ffa5 	bl	8000b50 <HAL_GetTick>
 8001c06:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001c08:	e00c      	b.n	8001c24 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001c0a:	f7fe ffa1 	bl	8000b50 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c18:	d904      	bls.n	8001c24 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <RTC_EnterInitMode+0x64>
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d1e8      	bne.n	8001c0a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10a      	bne.n	8001c82 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff89 	bl	8001b84 <HAL_RTC_WaitForSynchro>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8001c9a:	e005      	b.n	8001ca8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	3b0a      	subs	r3, #10
 8001ca6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	d8f6      	bhi.n	8001c9c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b2db      	uxtb	r3, r3
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b2db      	uxtb	r3, r3
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <__errno>:
 8001d00:	4b01      	ldr	r3, [pc, #4]	; (8001d08 <__errno+0x8>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	2000000c 	.word	0x2000000c

08001d0c <__libc_init_array>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	4d0d      	ldr	r5, [pc, #52]	; (8001d44 <__libc_init_array+0x38>)
 8001d10:	4c0d      	ldr	r4, [pc, #52]	; (8001d48 <__libc_init_array+0x3c>)
 8001d12:	1b64      	subs	r4, r4, r5
 8001d14:	10a4      	asrs	r4, r4, #2
 8001d16:	2600      	movs	r6, #0
 8001d18:	42a6      	cmp	r6, r4
 8001d1a:	d109      	bne.n	8001d30 <__libc_init_array+0x24>
 8001d1c:	4d0b      	ldr	r5, [pc, #44]	; (8001d4c <__libc_init_array+0x40>)
 8001d1e:	4c0c      	ldr	r4, [pc, #48]	; (8001d50 <__libc_init_array+0x44>)
 8001d20:	f000 ffae 	bl	8002c80 <_init>
 8001d24:	1b64      	subs	r4, r4, r5
 8001d26:	10a4      	asrs	r4, r4, #2
 8001d28:	2600      	movs	r6, #0
 8001d2a:	42a6      	cmp	r6, r4
 8001d2c:	d105      	bne.n	8001d3a <__libc_init_array+0x2e>
 8001d2e:	bd70      	pop	{r4, r5, r6, pc}
 8001d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d34:	4798      	blx	r3
 8001d36:	3601      	adds	r6, #1
 8001d38:	e7ee      	b.n	8001d18 <__libc_init_array+0xc>
 8001d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d3e:	4798      	blx	r3
 8001d40:	3601      	adds	r6, #1
 8001d42:	e7f2      	b.n	8001d2a <__libc_init_array+0x1e>
 8001d44:	08002d54 	.word	0x08002d54
 8001d48:	08002d54 	.word	0x08002d54
 8001d4c:	08002d54 	.word	0x08002d54
 8001d50:	08002d58 	.word	0x08002d58

08001d54 <memset>:
 8001d54:	4402      	add	r2, r0
 8001d56:	4603      	mov	r3, r0
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <memset+0xa>
 8001d5c:	4770      	bx	lr
 8001d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d62:	e7f9      	b.n	8001d58 <memset+0x4>

08001d64 <iprintf>:
 8001d64:	b40f      	push	{r0, r1, r2, r3}
 8001d66:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <iprintf+0x2c>)
 8001d68:	b513      	push	{r0, r1, r4, lr}
 8001d6a:	681c      	ldr	r4, [r3, #0]
 8001d6c:	b124      	cbz	r4, 8001d78 <iprintf+0x14>
 8001d6e:	69a3      	ldr	r3, [r4, #24]
 8001d70:	b913      	cbnz	r3, 8001d78 <iprintf+0x14>
 8001d72:	4620      	mov	r0, r4
 8001d74:	f000 f866 	bl	8001e44 <__sinit>
 8001d78:	ab05      	add	r3, sp, #20
 8001d7a:	9a04      	ldr	r2, [sp, #16]
 8001d7c:	68a1      	ldr	r1, [r4, #8]
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	4620      	mov	r0, r4
 8001d82:	f000 f9bd 	bl	8002100 <_vfiprintf_r>
 8001d86:	b002      	add	sp, #8
 8001d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d8c:	b004      	add	sp, #16
 8001d8e:	4770      	bx	lr
 8001d90:	2000000c 	.word	0x2000000c

08001d94 <std>:
 8001d94:	2300      	movs	r3, #0
 8001d96:	b510      	push	{r4, lr}
 8001d98:	4604      	mov	r4, r0
 8001d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001da2:	6083      	str	r3, [r0, #8]
 8001da4:	8181      	strh	r1, [r0, #12]
 8001da6:	6643      	str	r3, [r0, #100]	; 0x64
 8001da8:	81c2      	strh	r2, [r0, #14]
 8001daa:	6183      	str	r3, [r0, #24]
 8001dac:	4619      	mov	r1, r3
 8001dae:	2208      	movs	r2, #8
 8001db0:	305c      	adds	r0, #92	; 0x5c
 8001db2:	f7ff ffcf 	bl	8001d54 <memset>
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <std+0x38>)
 8001db8:	6263      	str	r3, [r4, #36]	; 0x24
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <std+0x3c>)
 8001dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <std+0x40>)
 8001dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dc2:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <std+0x44>)
 8001dc4:	6224      	str	r4, [r4, #32]
 8001dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	bf00      	nop
 8001dcc:	080026a9 	.word	0x080026a9
 8001dd0:	080026cb 	.word	0x080026cb
 8001dd4:	08002703 	.word	0x08002703
 8001dd8:	08002727 	.word	0x08002727

08001ddc <_cleanup_r>:
 8001ddc:	4901      	ldr	r1, [pc, #4]	; (8001de4 <_cleanup_r+0x8>)
 8001dde:	f000 b8af 	b.w	8001f40 <_fwalk_reent>
 8001de2:	bf00      	nop
 8001de4:	08002a01 	.word	0x08002a01

08001de8 <__sfmoreglue>:
 8001de8:	b570      	push	{r4, r5, r6, lr}
 8001dea:	2268      	movs	r2, #104	; 0x68
 8001dec:	1e4d      	subs	r5, r1, #1
 8001dee:	4355      	muls	r5, r2
 8001df0:	460e      	mov	r6, r1
 8001df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001df6:	f000 f8e5 	bl	8001fc4 <_malloc_r>
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	b140      	cbz	r0, 8001e10 <__sfmoreglue+0x28>
 8001dfe:	2100      	movs	r1, #0
 8001e00:	e9c0 1600 	strd	r1, r6, [r0]
 8001e04:	300c      	adds	r0, #12
 8001e06:	60a0      	str	r0, [r4, #8]
 8001e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e0c:	f7ff ffa2 	bl	8001d54 <memset>
 8001e10:	4620      	mov	r0, r4
 8001e12:	bd70      	pop	{r4, r5, r6, pc}

08001e14 <__sfp_lock_acquire>:
 8001e14:	4801      	ldr	r0, [pc, #4]	; (8001e1c <__sfp_lock_acquire+0x8>)
 8001e16:	f000 b8b3 	b.w	8001f80 <__retarget_lock_acquire_recursive>
 8001e1a:	bf00      	nop
 8001e1c:	200000c9 	.word	0x200000c9

08001e20 <__sfp_lock_release>:
 8001e20:	4801      	ldr	r0, [pc, #4]	; (8001e28 <__sfp_lock_release+0x8>)
 8001e22:	f000 b8ae 	b.w	8001f82 <__retarget_lock_release_recursive>
 8001e26:	bf00      	nop
 8001e28:	200000c9 	.word	0x200000c9

08001e2c <__sinit_lock_acquire>:
 8001e2c:	4801      	ldr	r0, [pc, #4]	; (8001e34 <__sinit_lock_acquire+0x8>)
 8001e2e:	f000 b8a7 	b.w	8001f80 <__retarget_lock_acquire_recursive>
 8001e32:	bf00      	nop
 8001e34:	200000ca 	.word	0x200000ca

08001e38 <__sinit_lock_release>:
 8001e38:	4801      	ldr	r0, [pc, #4]	; (8001e40 <__sinit_lock_release+0x8>)
 8001e3a:	f000 b8a2 	b.w	8001f82 <__retarget_lock_release_recursive>
 8001e3e:	bf00      	nop
 8001e40:	200000ca 	.word	0x200000ca

08001e44 <__sinit>:
 8001e44:	b510      	push	{r4, lr}
 8001e46:	4604      	mov	r4, r0
 8001e48:	f7ff fff0 	bl	8001e2c <__sinit_lock_acquire>
 8001e4c:	69a3      	ldr	r3, [r4, #24]
 8001e4e:	b11b      	cbz	r3, 8001e58 <__sinit+0x14>
 8001e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e54:	f7ff bff0 	b.w	8001e38 <__sinit_lock_release>
 8001e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <__sinit+0x68>)
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <__sinit+0x6c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e66:	42a3      	cmp	r3, r4
 8001e68:	bf04      	itt	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	61a3      	streq	r3, [r4, #24]
 8001e6e:	4620      	mov	r0, r4
 8001e70:	f000 f820 	bl	8001eb4 <__sfp>
 8001e74:	6060      	str	r0, [r4, #4]
 8001e76:	4620      	mov	r0, r4
 8001e78:	f000 f81c 	bl	8001eb4 <__sfp>
 8001e7c:	60a0      	str	r0, [r4, #8]
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f000 f818 	bl	8001eb4 <__sfp>
 8001e84:	2200      	movs	r2, #0
 8001e86:	60e0      	str	r0, [r4, #12]
 8001e88:	2104      	movs	r1, #4
 8001e8a:	6860      	ldr	r0, [r4, #4]
 8001e8c:	f7ff ff82 	bl	8001d94 <std>
 8001e90:	68a0      	ldr	r0, [r4, #8]
 8001e92:	2201      	movs	r2, #1
 8001e94:	2109      	movs	r1, #9
 8001e96:	f7ff ff7d 	bl	8001d94 <std>
 8001e9a:	68e0      	ldr	r0, [r4, #12]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	2112      	movs	r1, #18
 8001ea0:	f7ff ff78 	bl	8001d94 <std>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61a3      	str	r3, [r4, #24]
 8001ea8:	e7d2      	b.n	8001e50 <__sinit+0xc>
 8001eaa:	bf00      	nop
 8001eac:	08002cb4 	.word	0x08002cb4
 8001eb0:	08001ddd 	.word	0x08001ddd

08001eb4 <__sfp>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	4607      	mov	r7, r0
 8001eb8:	f7ff ffac 	bl	8001e14 <__sfp_lock_acquire>
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <__sfp+0x84>)
 8001ebe:	681e      	ldr	r6, [r3, #0]
 8001ec0:	69b3      	ldr	r3, [r6, #24]
 8001ec2:	b913      	cbnz	r3, 8001eca <__sfp+0x16>
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f7ff ffbd 	bl	8001e44 <__sinit>
 8001eca:	3648      	adds	r6, #72	; 0x48
 8001ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	d503      	bpl.n	8001edc <__sfp+0x28>
 8001ed4:	6833      	ldr	r3, [r6, #0]
 8001ed6:	b30b      	cbz	r3, 8001f1c <__sfp+0x68>
 8001ed8:	6836      	ldr	r6, [r6, #0]
 8001eda:	e7f7      	b.n	8001ecc <__sfp+0x18>
 8001edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ee0:	b9d5      	cbnz	r5, 8001f18 <__sfp+0x64>
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <__sfp+0x88>)
 8001ee4:	60e3      	str	r3, [r4, #12]
 8001ee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001eea:	6665      	str	r5, [r4, #100]	; 0x64
 8001eec:	f000 f847 	bl	8001f7e <__retarget_lock_init_recursive>
 8001ef0:	f7ff ff96 	bl	8001e20 <__sfp_lock_release>
 8001ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001efc:	6025      	str	r5, [r4, #0]
 8001efe:	61a5      	str	r5, [r4, #24]
 8001f00:	2208      	movs	r2, #8
 8001f02:	4629      	mov	r1, r5
 8001f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f08:	f7ff ff24 	bl	8001d54 <memset>
 8001f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f14:	4620      	mov	r0, r4
 8001f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f18:	3468      	adds	r4, #104	; 0x68
 8001f1a:	e7d9      	b.n	8001ed0 <__sfp+0x1c>
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4638      	mov	r0, r7
 8001f20:	f7ff ff62 	bl	8001de8 <__sfmoreglue>
 8001f24:	4604      	mov	r4, r0
 8001f26:	6030      	str	r0, [r6, #0]
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	d1d5      	bne.n	8001ed8 <__sfp+0x24>
 8001f2c:	f7ff ff78 	bl	8001e20 <__sfp_lock_release>
 8001f30:	230c      	movs	r3, #12
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	e7ee      	b.n	8001f14 <__sfp+0x60>
 8001f36:	bf00      	nop
 8001f38:	08002cb4 	.word	0x08002cb4
 8001f3c:	ffff0001 	.word	0xffff0001

08001f40 <_fwalk_reent>:
 8001f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f44:	4606      	mov	r6, r0
 8001f46:	4688      	mov	r8, r1
 8001f48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f4c:	2700      	movs	r7, #0
 8001f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f52:	f1b9 0901 	subs.w	r9, r9, #1
 8001f56:	d505      	bpl.n	8001f64 <_fwalk_reent+0x24>
 8001f58:	6824      	ldr	r4, [r4, #0]
 8001f5a:	2c00      	cmp	r4, #0
 8001f5c:	d1f7      	bne.n	8001f4e <_fwalk_reent+0xe>
 8001f5e:	4638      	mov	r0, r7
 8001f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f64:	89ab      	ldrh	r3, [r5, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d907      	bls.n	8001f7a <_fwalk_reent+0x3a>
 8001f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	d003      	beq.n	8001f7a <_fwalk_reent+0x3a>
 8001f72:	4629      	mov	r1, r5
 8001f74:	4630      	mov	r0, r6
 8001f76:	47c0      	blx	r8
 8001f78:	4307      	orrs	r7, r0
 8001f7a:	3568      	adds	r5, #104	; 0x68
 8001f7c:	e7e9      	b.n	8001f52 <_fwalk_reent+0x12>

08001f7e <__retarget_lock_init_recursive>:
 8001f7e:	4770      	bx	lr

08001f80 <__retarget_lock_acquire_recursive>:
 8001f80:	4770      	bx	lr

08001f82 <__retarget_lock_release_recursive>:
 8001f82:	4770      	bx	lr

08001f84 <sbrk_aligned>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4e0e      	ldr	r6, [pc, #56]	; (8001fc0 <sbrk_aligned+0x3c>)
 8001f88:	460c      	mov	r4, r1
 8001f8a:	6831      	ldr	r1, [r6, #0]
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	b911      	cbnz	r1, 8001f96 <sbrk_aligned+0x12>
 8001f90:	f000 fb7a 	bl	8002688 <_sbrk_r>
 8001f94:	6030      	str	r0, [r6, #0]
 8001f96:	4621      	mov	r1, r4
 8001f98:	4628      	mov	r0, r5
 8001f9a:	f000 fb75 	bl	8002688 <_sbrk_r>
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	d00a      	beq.n	8001fb8 <sbrk_aligned+0x34>
 8001fa2:	1cc4      	adds	r4, r0, #3
 8001fa4:	f024 0403 	bic.w	r4, r4, #3
 8001fa8:	42a0      	cmp	r0, r4
 8001faa:	d007      	beq.n	8001fbc <sbrk_aligned+0x38>
 8001fac:	1a21      	subs	r1, r4, r0
 8001fae:	4628      	mov	r0, r5
 8001fb0:	f000 fb6a 	bl	8002688 <_sbrk_r>
 8001fb4:	3001      	adds	r0, #1
 8001fb6:	d101      	bne.n	8001fbc <sbrk_aligned+0x38>
 8001fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
 8001fc0:	200000d0 	.word	0x200000d0

08001fc4 <_malloc_r>:
 8001fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fc8:	1ccd      	adds	r5, r1, #3
 8001fca:	f025 0503 	bic.w	r5, r5, #3
 8001fce:	3508      	adds	r5, #8
 8001fd0:	2d0c      	cmp	r5, #12
 8001fd2:	bf38      	it	cc
 8001fd4:	250c      	movcc	r5, #12
 8001fd6:	2d00      	cmp	r5, #0
 8001fd8:	4607      	mov	r7, r0
 8001fda:	db01      	blt.n	8001fe0 <_malloc_r+0x1c>
 8001fdc:	42a9      	cmp	r1, r5
 8001fde:	d905      	bls.n	8001fec <_malloc_r+0x28>
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	4630      	mov	r0, r6
 8001fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fec:	4e2e      	ldr	r6, [pc, #184]	; (80020a8 <_malloc_r+0xe4>)
 8001fee:	f000 fdbb 	bl	8002b68 <__malloc_lock>
 8001ff2:	6833      	ldr	r3, [r6, #0]
 8001ff4:	461c      	mov	r4, r3
 8001ff6:	bb34      	cbnz	r4, 8002046 <_malloc_r+0x82>
 8001ff8:	4629      	mov	r1, r5
 8001ffa:	4638      	mov	r0, r7
 8001ffc:	f7ff ffc2 	bl	8001f84 <sbrk_aligned>
 8002000:	1c43      	adds	r3, r0, #1
 8002002:	4604      	mov	r4, r0
 8002004:	d14d      	bne.n	80020a2 <_malloc_r+0xde>
 8002006:	6834      	ldr	r4, [r6, #0]
 8002008:	4626      	mov	r6, r4
 800200a:	2e00      	cmp	r6, #0
 800200c:	d140      	bne.n	8002090 <_malloc_r+0xcc>
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	4631      	mov	r1, r6
 8002012:	4638      	mov	r0, r7
 8002014:	eb04 0803 	add.w	r8, r4, r3
 8002018:	f000 fb36 	bl	8002688 <_sbrk_r>
 800201c:	4580      	cmp	r8, r0
 800201e:	d13a      	bne.n	8002096 <_malloc_r+0xd2>
 8002020:	6821      	ldr	r1, [r4, #0]
 8002022:	3503      	adds	r5, #3
 8002024:	1a6d      	subs	r5, r5, r1
 8002026:	f025 0503 	bic.w	r5, r5, #3
 800202a:	3508      	adds	r5, #8
 800202c:	2d0c      	cmp	r5, #12
 800202e:	bf38      	it	cc
 8002030:	250c      	movcc	r5, #12
 8002032:	4629      	mov	r1, r5
 8002034:	4638      	mov	r0, r7
 8002036:	f7ff ffa5 	bl	8001f84 <sbrk_aligned>
 800203a:	3001      	adds	r0, #1
 800203c:	d02b      	beq.n	8002096 <_malloc_r+0xd2>
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	442b      	add	r3, r5
 8002042:	6023      	str	r3, [r4, #0]
 8002044:	e00e      	b.n	8002064 <_malloc_r+0xa0>
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	1b52      	subs	r2, r2, r5
 800204a:	d41e      	bmi.n	800208a <_malloc_r+0xc6>
 800204c:	2a0b      	cmp	r2, #11
 800204e:	d916      	bls.n	800207e <_malloc_r+0xba>
 8002050:	1961      	adds	r1, r4, r5
 8002052:	42a3      	cmp	r3, r4
 8002054:	6025      	str	r5, [r4, #0]
 8002056:	bf18      	it	ne
 8002058:	6059      	strne	r1, [r3, #4]
 800205a:	6863      	ldr	r3, [r4, #4]
 800205c:	bf08      	it	eq
 800205e:	6031      	streq	r1, [r6, #0]
 8002060:	5162      	str	r2, [r4, r5]
 8002062:	604b      	str	r3, [r1, #4]
 8002064:	4638      	mov	r0, r7
 8002066:	f104 060b 	add.w	r6, r4, #11
 800206a:	f000 fd83 	bl	8002b74 <__malloc_unlock>
 800206e:	f026 0607 	bic.w	r6, r6, #7
 8002072:	1d23      	adds	r3, r4, #4
 8002074:	1af2      	subs	r2, r6, r3
 8002076:	d0b6      	beq.n	8001fe6 <_malloc_r+0x22>
 8002078:	1b9b      	subs	r3, r3, r6
 800207a:	50a3      	str	r3, [r4, r2]
 800207c:	e7b3      	b.n	8001fe6 <_malloc_r+0x22>
 800207e:	6862      	ldr	r2, [r4, #4]
 8002080:	42a3      	cmp	r3, r4
 8002082:	bf0c      	ite	eq
 8002084:	6032      	streq	r2, [r6, #0]
 8002086:	605a      	strne	r2, [r3, #4]
 8002088:	e7ec      	b.n	8002064 <_malloc_r+0xa0>
 800208a:	4623      	mov	r3, r4
 800208c:	6864      	ldr	r4, [r4, #4]
 800208e:	e7b2      	b.n	8001ff6 <_malloc_r+0x32>
 8002090:	4634      	mov	r4, r6
 8002092:	6876      	ldr	r6, [r6, #4]
 8002094:	e7b9      	b.n	800200a <_malloc_r+0x46>
 8002096:	230c      	movs	r3, #12
 8002098:	603b      	str	r3, [r7, #0]
 800209a:	4638      	mov	r0, r7
 800209c:	f000 fd6a 	bl	8002b74 <__malloc_unlock>
 80020a0:	e7a1      	b.n	8001fe6 <_malloc_r+0x22>
 80020a2:	6025      	str	r5, [r4, #0]
 80020a4:	e7de      	b.n	8002064 <_malloc_r+0xa0>
 80020a6:	bf00      	nop
 80020a8:	200000cc 	.word	0x200000cc

080020ac <__sfputc_r>:
 80020ac:	6893      	ldr	r3, [r2, #8]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	b410      	push	{r4}
 80020b4:	6093      	str	r3, [r2, #8]
 80020b6:	da08      	bge.n	80020ca <__sfputc_r+0x1e>
 80020b8:	6994      	ldr	r4, [r2, #24]
 80020ba:	42a3      	cmp	r3, r4
 80020bc:	db01      	blt.n	80020c2 <__sfputc_r+0x16>
 80020be:	290a      	cmp	r1, #10
 80020c0:	d103      	bne.n	80020ca <__sfputc_r+0x1e>
 80020c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020c6:	f000 bb33 	b.w	8002730 <__swbuf_r>
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	1c58      	adds	r0, r3, #1
 80020ce:	6010      	str	r0, [r2, #0]
 80020d0:	7019      	strb	r1, [r3, #0]
 80020d2:	4608      	mov	r0, r1
 80020d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020d8:	4770      	bx	lr

080020da <__sfputs_r>:
 80020da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020dc:	4606      	mov	r6, r0
 80020de:	460f      	mov	r7, r1
 80020e0:	4614      	mov	r4, r2
 80020e2:	18d5      	adds	r5, r2, r3
 80020e4:	42ac      	cmp	r4, r5
 80020e6:	d101      	bne.n	80020ec <__sfputs_r+0x12>
 80020e8:	2000      	movs	r0, #0
 80020ea:	e007      	b.n	80020fc <__sfputs_r+0x22>
 80020ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020f0:	463a      	mov	r2, r7
 80020f2:	4630      	mov	r0, r6
 80020f4:	f7ff ffda 	bl	80020ac <__sfputc_r>
 80020f8:	1c43      	adds	r3, r0, #1
 80020fa:	d1f3      	bne.n	80020e4 <__sfputs_r+0xa>
 80020fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002100 <_vfiprintf_r>:
 8002100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002104:	460d      	mov	r5, r1
 8002106:	b09d      	sub	sp, #116	; 0x74
 8002108:	4614      	mov	r4, r2
 800210a:	4698      	mov	r8, r3
 800210c:	4606      	mov	r6, r0
 800210e:	b118      	cbz	r0, 8002118 <_vfiprintf_r+0x18>
 8002110:	6983      	ldr	r3, [r0, #24]
 8002112:	b90b      	cbnz	r3, 8002118 <_vfiprintf_r+0x18>
 8002114:	f7ff fe96 	bl	8001e44 <__sinit>
 8002118:	4b89      	ldr	r3, [pc, #548]	; (8002340 <_vfiprintf_r+0x240>)
 800211a:	429d      	cmp	r5, r3
 800211c:	d11b      	bne.n	8002156 <_vfiprintf_r+0x56>
 800211e:	6875      	ldr	r5, [r6, #4]
 8002120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002122:	07d9      	lsls	r1, r3, #31
 8002124:	d405      	bmi.n	8002132 <_vfiprintf_r+0x32>
 8002126:	89ab      	ldrh	r3, [r5, #12]
 8002128:	059a      	lsls	r2, r3, #22
 800212a:	d402      	bmi.n	8002132 <_vfiprintf_r+0x32>
 800212c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800212e:	f7ff ff27 	bl	8001f80 <__retarget_lock_acquire_recursive>
 8002132:	89ab      	ldrh	r3, [r5, #12]
 8002134:	071b      	lsls	r3, r3, #28
 8002136:	d501      	bpl.n	800213c <_vfiprintf_r+0x3c>
 8002138:	692b      	ldr	r3, [r5, #16]
 800213a:	b9eb      	cbnz	r3, 8002178 <_vfiprintf_r+0x78>
 800213c:	4629      	mov	r1, r5
 800213e:	4630      	mov	r0, r6
 8002140:	f000 fb5a 	bl	80027f8 <__swsetup_r>
 8002144:	b1c0      	cbz	r0, 8002178 <_vfiprintf_r+0x78>
 8002146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002148:	07dc      	lsls	r4, r3, #31
 800214a:	d50e      	bpl.n	800216a <_vfiprintf_r+0x6a>
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	b01d      	add	sp, #116	; 0x74
 8002152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002156:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <_vfiprintf_r+0x244>)
 8002158:	429d      	cmp	r5, r3
 800215a:	d101      	bne.n	8002160 <_vfiprintf_r+0x60>
 800215c:	68b5      	ldr	r5, [r6, #8]
 800215e:	e7df      	b.n	8002120 <_vfiprintf_r+0x20>
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <_vfiprintf_r+0x248>)
 8002162:	429d      	cmp	r5, r3
 8002164:	bf08      	it	eq
 8002166:	68f5      	ldreq	r5, [r6, #12]
 8002168:	e7da      	b.n	8002120 <_vfiprintf_r+0x20>
 800216a:	89ab      	ldrh	r3, [r5, #12]
 800216c:	0598      	lsls	r0, r3, #22
 800216e:	d4ed      	bmi.n	800214c <_vfiprintf_r+0x4c>
 8002170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002172:	f7ff ff06 	bl	8001f82 <__retarget_lock_release_recursive>
 8002176:	e7e9      	b.n	800214c <_vfiprintf_r+0x4c>
 8002178:	2300      	movs	r3, #0
 800217a:	9309      	str	r3, [sp, #36]	; 0x24
 800217c:	2320      	movs	r3, #32
 800217e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002182:	f8cd 800c 	str.w	r8, [sp, #12]
 8002186:	2330      	movs	r3, #48	; 0x30
 8002188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800234c <_vfiprintf_r+0x24c>
 800218c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002190:	f04f 0901 	mov.w	r9, #1
 8002194:	4623      	mov	r3, r4
 8002196:	469a      	mov	sl, r3
 8002198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800219c:	b10a      	cbz	r2, 80021a2 <_vfiprintf_r+0xa2>
 800219e:	2a25      	cmp	r2, #37	; 0x25
 80021a0:	d1f9      	bne.n	8002196 <_vfiprintf_r+0x96>
 80021a2:	ebba 0b04 	subs.w	fp, sl, r4
 80021a6:	d00b      	beq.n	80021c0 <_vfiprintf_r+0xc0>
 80021a8:	465b      	mov	r3, fp
 80021aa:	4622      	mov	r2, r4
 80021ac:	4629      	mov	r1, r5
 80021ae:	4630      	mov	r0, r6
 80021b0:	f7ff ff93 	bl	80020da <__sfputs_r>
 80021b4:	3001      	adds	r0, #1
 80021b6:	f000 80aa 	beq.w	800230e <_vfiprintf_r+0x20e>
 80021ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021bc:	445a      	add	r2, fp
 80021be:	9209      	str	r2, [sp, #36]	; 0x24
 80021c0:	f89a 3000 	ldrb.w	r3, [sl]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a2 	beq.w	800230e <_vfiprintf_r+0x20e>
 80021ca:	2300      	movs	r3, #0
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021d4:	f10a 0a01 	add.w	sl, sl, #1
 80021d8:	9304      	str	r3, [sp, #16]
 80021da:	9307      	str	r3, [sp, #28]
 80021dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021e0:	931a      	str	r3, [sp, #104]	; 0x68
 80021e2:	4654      	mov	r4, sl
 80021e4:	2205      	movs	r2, #5
 80021e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021ea:	4858      	ldr	r0, [pc, #352]	; (800234c <_vfiprintf_r+0x24c>)
 80021ec:	f7fd fff8 	bl	80001e0 <memchr>
 80021f0:	9a04      	ldr	r2, [sp, #16]
 80021f2:	b9d8      	cbnz	r0, 800222c <_vfiprintf_r+0x12c>
 80021f4:	06d1      	lsls	r1, r2, #27
 80021f6:	bf44      	itt	mi
 80021f8:	2320      	movmi	r3, #32
 80021fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021fe:	0713      	lsls	r3, r2, #28
 8002200:	bf44      	itt	mi
 8002202:	232b      	movmi	r3, #43	; 0x2b
 8002204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002208:	f89a 3000 	ldrb.w	r3, [sl]
 800220c:	2b2a      	cmp	r3, #42	; 0x2a
 800220e:	d015      	beq.n	800223c <_vfiprintf_r+0x13c>
 8002210:	9a07      	ldr	r2, [sp, #28]
 8002212:	4654      	mov	r4, sl
 8002214:	2000      	movs	r0, #0
 8002216:	f04f 0c0a 	mov.w	ip, #10
 800221a:	4621      	mov	r1, r4
 800221c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002220:	3b30      	subs	r3, #48	; 0x30
 8002222:	2b09      	cmp	r3, #9
 8002224:	d94e      	bls.n	80022c4 <_vfiprintf_r+0x1c4>
 8002226:	b1b0      	cbz	r0, 8002256 <_vfiprintf_r+0x156>
 8002228:	9207      	str	r2, [sp, #28]
 800222a:	e014      	b.n	8002256 <_vfiprintf_r+0x156>
 800222c:	eba0 0308 	sub.w	r3, r0, r8
 8002230:	fa09 f303 	lsl.w	r3, r9, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	9304      	str	r3, [sp, #16]
 8002238:	46a2      	mov	sl, r4
 800223a:	e7d2      	b.n	80021e2 <_vfiprintf_r+0xe2>
 800223c:	9b03      	ldr	r3, [sp, #12]
 800223e:	1d19      	adds	r1, r3, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	9103      	str	r1, [sp, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	bfbb      	ittet	lt
 8002248:	425b      	neglt	r3, r3
 800224a:	f042 0202 	orrlt.w	r2, r2, #2
 800224e:	9307      	strge	r3, [sp, #28]
 8002250:	9307      	strlt	r3, [sp, #28]
 8002252:	bfb8      	it	lt
 8002254:	9204      	strlt	r2, [sp, #16]
 8002256:	7823      	ldrb	r3, [r4, #0]
 8002258:	2b2e      	cmp	r3, #46	; 0x2e
 800225a:	d10c      	bne.n	8002276 <_vfiprintf_r+0x176>
 800225c:	7863      	ldrb	r3, [r4, #1]
 800225e:	2b2a      	cmp	r3, #42	; 0x2a
 8002260:	d135      	bne.n	80022ce <_vfiprintf_r+0x1ce>
 8002262:	9b03      	ldr	r3, [sp, #12]
 8002264:	1d1a      	adds	r2, r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	9203      	str	r2, [sp, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	bfb8      	it	lt
 800226e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002272:	3402      	adds	r4, #2
 8002274:	9305      	str	r3, [sp, #20]
 8002276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800235c <_vfiprintf_r+0x25c>
 800227a:	7821      	ldrb	r1, [r4, #0]
 800227c:	2203      	movs	r2, #3
 800227e:	4650      	mov	r0, sl
 8002280:	f7fd ffae 	bl	80001e0 <memchr>
 8002284:	b140      	cbz	r0, 8002298 <_vfiprintf_r+0x198>
 8002286:	2340      	movs	r3, #64	; 0x40
 8002288:	eba0 000a 	sub.w	r0, r0, sl
 800228c:	fa03 f000 	lsl.w	r0, r3, r0
 8002290:	9b04      	ldr	r3, [sp, #16]
 8002292:	4303      	orrs	r3, r0
 8002294:	3401      	adds	r4, #1
 8002296:	9304      	str	r3, [sp, #16]
 8002298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800229c:	482c      	ldr	r0, [pc, #176]	; (8002350 <_vfiprintf_r+0x250>)
 800229e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022a2:	2206      	movs	r2, #6
 80022a4:	f7fd ff9c 	bl	80001e0 <memchr>
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d03f      	beq.n	800232c <_vfiprintf_r+0x22c>
 80022ac:	4b29      	ldr	r3, [pc, #164]	; (8002354 <_vfiprintf_r+0x254>)
 80022ae:	bb1b      	cbnz	r3, 80022f8 <_vfiprintf_r+0x1f8>
 80022b0:	9b03      	ldr	r3, [sp, #12]
 80022b2:	3307      	adds	r3, #7
 80022b4:	f023 0307 	bic.w	r3, r3, #7
 80022b8:	3308      	adds	r3, #8
 80022ba:	9303      	str	r3, [sp, #12]
 80022bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022be:	443b      	add	r3, r7
 80022c0:	9309      	str	r3, [sp, #36]	; 0x24
 80022c2:	e767      	b.n	8002194 <_vfiprintf_r+0x94>
 80022c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80022c8:	460c      	mov	r4, r1
 80022ca:	2001      	movs	r0, #1
 80022cc:	e7a5      	b.n	800221a <_vfiprintf_r+0x11a>
 80022ce:	2300      	movs	r3, #0
 80022d0:	3401      	adds	r4, #1
 80022d2:	9305      	str	r3, [sp, #20]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f04f 0c0a 	mov.w	ip, #10
 80022da:	4620      	mov	r0, r4
 80022dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022e0:	3a30      	subs	r2, #48	; 0x30
 80022e2:	2a09      	cmp	r2, #9
 80022e4:	d903      	bls.n	80022ee <_vfiprintf_r+0x1ee>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0c5      	beq.n	8002276 <_vfiprintf_r+0x176>
 80022ea:	9105      	str	r1, [sp, #20]
 80022ec:	e7c3      	b.n	8002276 <_vfiprintf_r+0x176>
 80022ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80022f2:	4604      	mov	r4, r0
 80022f4:	2301      	movs	r3, #1
 80022f6:	e7f0      	b.n	80022da <_vfiprintf_r+0x1da>
 80022f8:	ab03      	add	r3, sp, #12
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	462a      	mov	r2, r5
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <_vfiprintf_r+0x258>)
 8002300:	a904      	add	r1, sp, #16
 8002302:	4630      	mov	r0, r6
 8002304:	f3af 8000 	nop.w
 8002308:	4607      	mov	r7, r0
 800230a:	1c78      	adds	r0, r7, #1
 800230c:	d1d6      	bne.n	80022bc <_vfiprintf_r+0x1bc>
 800230e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002310:	07d9      	lsls	r1, r3, #31
 8002312:	d405      	bmi.n	8002320 <_vfiprintf_r+0x220>
 8002314:	89ab      	ldrh	r3, [r5, #12]
 8002316:	059a      	lsls	r2, r3, #22
 8002318:	d402      	bmi.n	8002320 <_vfiprintf_r+0x220>
 800231a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800231c:	f7ff fe31 	bl	8001f82 <__retarget_lock_release_recursive>
 8002320:	89ab      	ldrh	r3, [r5, #12]
 8002322:	065b      	lsls	r3, r3, #25
 8002324:	f53f af12 	bmi.w	800214c <_vfiprintf_r+0x4c>
 8002328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800232a:	e711      	b.n	8002150 <_vfiprintf_r+0x50>
 800232c:	ab03      	add	r3, sp, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462a      	mov	r2, r5
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <_vfiprintf_r+0x258>)
 8002334:	a904      	add	r1, sp, #16
 8002336:	4630      	mov	r0, r6
 8002338:	f000 f880 	bl	800243c <_printf_i>
 800233c:	e7e4      	b.n	8002308 <_vfiprintf_r+0x208>
 800233e:	bf00      	nop
 8002340:	08002cd8 	.word	0x08002cd8
 8002344:	08002cf8 	.word	0x08002cf8
 8002348:	08002cb8 	.word	0x08002cb8
 800234c:	08002d18 	.word	0x08002d18
 8002350:	08002d22 	.word	0x08002d22
 8002354:	00000000 	.word	0x00000000
 8002358:	080020db 	.word	0x080020db
 800235c:	08002d1e 	.word	0x08002d1e

08002360 <_printf_common>:
 8002360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002364:	4616      	mov	r6, r2
 8002366:	4699      	mov	r9, r3
 8002368:	688a      	ldr	r2, [r1, #8]
 800236a:	690b      	ldr	r3, [r1, #16]
 800236c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002370:	4293      	cmp	r3, r2
 8002372:	bfb8      	it	lt
 8002374:	4613      	movlt	r3, r2
 8002376:	6033      	str	r3, [r6, #0]
 8002378:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800237c:	4607      	mov	r7, r0
 800237e:	460c      	mov	r4, r1
 8002380:	b10a      	cbz	r2, 8002386 <_printf_common+0x26>
 8002382:	3301      	adds	r3, #1
 8002384:	6033      	str	r3, [r6, #0]
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	0699      	lsls	r1, r3, #26
 800238a:	bf42      	ittt	mi
 800238c:	6833      	ldrmi	r3, [r6, #0]
 800238e:	3302      	addmi	r3, #2
 8002390:	6033      	strmi	r3, [r6, #0]
 8002392:	6825      	ldr	r5, [r4, #0]
 8002394:	f015 0506 	ands.w	r5, r5, #6
 8002398:	d106      	bne.n	80023a8 <_printf_common+0x48>
 800239a:	f104 0a19 	add.w	sl, r4, #25
 800239e:	68e3      	ldr	r3, [r4, #12]
 80023a0:	6832      	ldr	r2, [r6, #0]
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	42ab      	cmp	r3, r5
 80023a6:	dc26      	bgt.n	80023f6 <_printf_common+0x96>
 80023a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023ac:	1e13      	subs	r3, r2, #0
 80023ae:	6822      	ldr	r2, [r4, #0]
 80023b0:	bf18      	it	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	0692      	lsls	r2, r2, #26
 80023b6:	d42b      	bmi.n	8002410 <_printf_common+0xb0>
 80023b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023bc:	4649      	mov	r1, r9
 80023be:	4638      	mov	r0, r7
 80023c0:	47c0      	blx	r8
 80023c2:	3001      	adds	r0, #1
 80023c4:	d01e      	beq.n	8002404 <_printf_common+0xa4>
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	68e5      	ldr	r5, [r4, #12]
 80023ca:	6832      	ldr	r2, [r6, #0]
 80023cc:	f003 0306 	and.w	r3, r3, #6
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	bf08      	it	eq
 80023d4:	1aad      	subeq	r5, r5, r2
 80023d6:	68a3      	ldr	r3, [r4, #8]
 80023d8:	6922      	ldr	r2, [r4, #16]
 80023da:	bf0c      	ite	eq
 80023dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023e0:	2500      	movne	r5, #0
 80023e2:	4293      	cmp	r3, r2
 80023e4:	bfc4      	itt	gt
 80023e6:	1a9b      	subgt	r3, r3, r2
 80023e8:	18ed      	addgt	r5, r5, r3
 80023ea:	2600      	movs	r6, #0
 80023ec:	341a      	adds	r4, #26
 80023ee:	42b5      	cmp	r5, r6
 80023f0:	d11a      	bne.n	8002428 <_printf_common+0xc8>
 80023f2:	2000      	movs	r0, #0
 80023f4:	e008      	b.n	8002408 <_printf_common+0xa8>
 80023f6:	2301      	movs	r3, #1
 80023f8:	4652      	mov	r2, sl
 80023fa:	4649      	mov	r1, r9
 80023fc:	4638      	mov	r0, r7
 80023fe:	47c0      	blx	r8
 8002400:	3001      	adds	r0, #1
 8002402:	d103      	bne.n	800240c <_printf_common+0xac>
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800240c:	3501      	adds	r5, #1
 800240e:	e7c6      	b.n	800239e <_printf_common+0x3e>
 8002410:	18e1      	adds	r1, r4, r3
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	2030      	movs	r0, #48	; 0x30
 8002416:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800241a:	4422      	add	r2, r4
 800241c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002424:	3302      	adds	r3, #2
 8002426:	e7c7      	b.n	80023b8 <_printf_common+0x58>
 8002428:	2301      	movs	r3, #1
 800242a:	4622      	mov	r2, r4
 800242c:	4649      	mov	r1, r9
 800242e:	4638      	mov	r0, r7
 8002430:	47c0      	blx	r8
 8002432:	3001      	adds	r0, #1
 8002434:	d0e6      	beq.n	8002404 <_printf_common+0xa4>
 8002436:	3601      	adds	r6, #1
 8002438:	e7d9      	b.n	80023ee <_printf_common+0x8e>
	...

0800243c <_printf_i>:
 800243c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002440:	7e0f      	ldrb	r7, [r1, #24]
 8002442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002444:	2f78      	cmp	r7, #120	; 0x78
 8002446:	4691      	mov	r9, r2
 8002448:	4680      	mov	r8, r0
 800244a:	460c      	mov	r4, r1
 800244c:	469a      	mov	sl, r3
 800244e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002452:	d807      	bhi.n	8002464 <_printf_i+0x28>
 8002454:	2f62      	cmp	r7, #98	; 0x62
 8002456:	d80a      	bhi.n	800246e <_printf_i+0x32>
 8002458:	2f00      	cmp	r7, #0
 800245a:	f000 80d8 	beq.w	800260e <_printf_i+0x1d2>
 800245e:	2f58      	cmp	r7, #88	; 0x58
 8002460:	f000 80a3 	beq.w	80025aa <_printf_i+0x16e>
 8002464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800246c:	e03a      	b.n	80024e4 <_printf_i+0xa8>
 800246e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002472:	2b15      	cmp	r3, #21
 8002474:	d8f6      	bhi.n	8002464 <_printf_i+0x28>
 8002476:	a101      	add	r1, pc, #4	; (adr r1, 800247c <_printf_i+0x40>)
 8002478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800247c:	080024d5 	.word	0x080024d5
 8002480:	080024e9 	.word	0x080024e9
 8002484:	08002465 	.word	0x08002465
 8002488:	08002465 	.word	0x08002465
 800248c:	08002465 	.word	0x08002465
 8002490:	08002465 	.word	0x08002465
 8002494:	080024e9 	.word	0x080024e9
 8002498:	08002465 	.word	0x08002465
 800249c:	08002465 	.word	0x08002465
 80024a0:	08002465 	.word	0x08002465
 80024a4:	08002465 	.word	0x08002465
 80024a8:	080025f5 	.word	0x080025f5
 80024ac:	08002519 	.word	0x08002519
 80024b0:	080025d7 	.word	0x080025d7
 80024b4:	08002465 	.word	0x08002465
 80024b8:	08002465 	.word	0x08002465
 80024bc:	08002617 	.word	0x08002617
 80024c0:	08002465 	.word	0x08002465
 80024c4:	08002519 	.word	0x08002519
 80024c8:	08002465 	.word	0x08002465
 80024cc:	08002465 	.word	0x08002465
 80024d0:	080025df 	.word	0x080025df
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	602a      	str	r2, [r5, #0]
 80024dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0a3      	b.n	8002630 <_printf_i+0x1f4>
 80024e8:	6820      	ldr	r0, [r4, #0]
 80024ea:	6829      	ldr	r1, [r5, #0]
 80024ec:	0606      	lsls	r6, r0, #24
 80024ee:	f101 0304 	add.w	r3, r1, #4
 80024f2:	d50a      	bpl.n	800250a <_printf_i+0xce>
 80024f4:	680e      	ldr	r6, [r1, #0]
 80024f6:	602b      	str	r3, [r5, #0]
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	da03      	bge.n	8002504 <_printf_i+0xc8>
 80024fc:	232d      	movs	r3, #45	; 0x2d
 80024fe:	4276      	negs	r6, r6
 8002500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002504:	485e      	ldr	r0, [pc, #376]	; (8002680 <_printf_i+0x244>)
 8002506:	230a      	movs	r3, #10
 8002508:	e019      	b.n	800253e <_printf_i+0x102>
 800250a:	680e      	ldr	r6, [r1, #0]
 800250c:	602b      	str	r3, [r5, #0]
 800250e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002512:	bf18      	it	ne
 8002514:	b236      	sxthne	r6, r6
 8002516:	e7ef      	b.n	80024f8 <_printf_i+0xbc>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	6820      	ldr	r0, [r4, #0]
 800251c:	1d19      	adds	r1, r3, #4
 800251e:	6029      	str	r1, [r5, #0]
 8002520:	0601      	lsls	r1, r0, #24
 8002522:	d501      	bpl.n	8002528 <_printf_i+0xec>
 8002524:	681e      	ldr	r6, [r3, #0]
 8002526:	e002      	b.n	800252e <_printf_i+0xf2>
 8002528:	0646      	lsls	r6, r0, #25
 800252a:	d5fb      	bpl.n	8002524 <_printf_i+0xe8>
 800252c:	881e      	ldrh	r6, [r3, #0]
 800252e:	4854      	ldr	r0, [pc, #336]	; (8002680 <_printf_i+0x244>)
 8002530:	2f6f      	cmp	r7, #111	; 0x6f
 8002532:	bf0c      	ite	eq
 8002534:	2308      	moveq	r3, #8
 8002536:	230a      	movne	r3, #10
 8002538:	2100      	movs	r1, #0
 800253a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800253e:	6865      	ldr	r5, [r4, #4]
 8002540:	60a5      	str	r5, [r4, #8]
 8002542:	2d00      	cmp	r5, #0
 8002544:	bfa2      	ittt	ge
 8002546:	6821      	ldrge	r1, [r4, #0]
 8002548:	f021 0104 	bicge.w	r1, r1, #4
 800254c:	6021      	strge	r1, [r4, #0]
 800254e:	b90e      	cbnz	r6, 8002554 <_printf_i+0x118>
 8002550:	2d00      	cmp	r5, #0
 8002552:	d04d      	beq.n	80025f0 <_printf_i+0x1b4>
 8002554:	4615      	mov	r5, r2
 8002556:	fbb6 f1f3 	udiv	r1, r6, r3
 800255a:	fb03 6711 	mls	r7, r3, r1, r6
 800255e:	5dc7      	ldrb	r7, [r0, r7]
 8002560:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002564:	4637      	mov	r7, r6
 8002566:	42bb      	cmp	r3, r7
 8002568:	460e      	mov	r6, r1
 800256a:	d9f4      	bls.n	8002556 <_printf_i+0x11a>
 800256c:	2b08      	cmp	r3, #8
 800256e:	d10b      	bne.n	8002588 <_printf_i+0x14c>
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	07de      	lsls	r6, r3, #31
 8002574:	d508      	bpl.n	8002588 <_printf_i+0x14c>
 8002576:	6923      	ldr	r3, [r4, #16]
 8002578:	6861      	ldr	r1, [r4, #4]
 800257a:	4299      	cmp	r1, r3
 800257c:	bfde      	ittt	le
 800257e:	2330      	movle	r3, #48	; 0x30
 8002580:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002584:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002588:	1b52      	subs	r2, r2, r5
 800258a:	6122      	str	r2, [r4, #16]
 800258c:	f8cd a000 	str.w	sl, [sp]
 8002590:	464b      	mov	r3, r9
 8002592:	aa03      	add	r2, sp, #12
 8002594:	4621      	mov	r1, r4
 8002596:	4640      	mov	r0, r8
 8002598:	f7ff fee2 	bl	8002360 <_printf_common>
 800259c:	3001      	adds	r0, #1
 800259e:	d14c      	bne.n	800263a <_printf_i+0x1fe>
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	b004      	add	sp, #16
 80025a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025aa:	4835      	ldr	r0, [pc, #212]	; (8002680 <_printf_i+0x244>)
 80025ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025b0:	6829      	ldr	r1, [r5, #0]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80025b8:	6029      	str	r1, [r5, #0]
 80025ba:	061d      	lsls	r5, r3, #24
 80025bc:	d514      	bpl.n	80025e8 <_printf_i+0x1ac>
 80025be:	07df      	lsls	r7, r3, #31
 80025c0:	bf44      	itt	mi
 80025c2:	f043 0320 	orrmi.w	r3, r3, #32
 80025c6:	6023      	strmi	r3, [r4, #0]
 80025c8:	b91e      	cbnz	r6, 80025d2 <_printf_i+0x196>
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	f023 0320 	bic.w	r3, r3, #32
 80025d0:	6023      	str	r3, [r4, #0]
 80025d2:	2310      	movs	r3, #16
 80025d4:	e7b0      	b.n	8002538 <_printf_i+0xfc>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	f043 0320 	orr.w	r3, r3, #32
 80025dc:	6023      	str	r3, [r4, #0]
 80025de:	2378      	movs	r3, #120	; 0x78
 80025e0:	4828      	ldr	r0, [pc, #160]	; (8002684 <_printf_i+0x248>)
 80025e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80025e6:	e7e3      	b.n	80025b0 <_printf_i+0x174>
 80025e8:	0659      	lsls	r1, r3, #25
 80025ea:	bf48      	it	mi
 80025ec:	b2b6      	uxthmi	r6, r6
 80025ee:	e7e6      	b.n	80025be <_printf_i+0x182>
 80025f0:	4615      	mov	r5, r2
 80025f2:	e7bb      	b.n	800256c <_printf_i+0x130>
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	6826      	ldr	r6, [r4, #0]
 80025f8:	6961      	ldr	r1, [r4, #20]
 80025fa:	1d18      	adds	r0, r3, #4
 80025fc:	6028      	str	r0, [r5, #0]
 80025fe:	0635      	lsls	r5, r6, #24
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	d501      	bpl.n	8002608 <_printf_i+0x1cc>
 8002604:	6019      	str	r1, [r3, #0]
 8002606:	e002      	b.n	800260e <_printf_i+0x1d2>
 8002608:	0670      	lsls	r0, r6, #25
 800260a:	d5fb      	bpl.n	8002604 <_printf_i+0x1c8>
 800260c:	8019      	strh	r1, [r3, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	6123      	str	r3, [r4, #16]
 8002612:	4615      	mov	r5, r2
 8002614:	e7ba      	b.n	800258c <_printf_i+0x150>
 8002616:	682b      	ldr	r3, [r5, #0]
 8002618:	1d1a      	adds	r2, r3, #4
 800261a:	602a      	str	r2, [r5, #0]
 800261c:	681d      	ldr	r5, [r3, #0]
 800261e:	6862      	ldr	r2, [r4, #4]
 8002620:	2100      	movs	r1, #0
 8002622:	4628      	mov	r0, r5
 8002624:	f7fd fddc 	bl	80001e0 <memchr>
 8002628:	b108      	cbz	r0, 800262e <_printf_i+0x1f2>
 800262a:	1b40      	subs	r0, r0, r5
 800262c:	6060      	str	r0, [r4, #4]
 800262e:	6863      	ldr	r3, [r4, #4]
 8002630:	6123      	str	r3, [r4, #16]
 8002632:	2300      	movs	r3, #0
 8002634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002638:	e7a8      	b.n	800258c <_printf_i+0x150>
 800263a:	6923      	ldr	r3, [r4, #16]
 800263c:	462a      	mov	r2, r5
 800263e:	4649      	mov	r1, r9
 8002640:	4640      	mov	r0, r8
 8002642:	47d0      	blx	sl
 8002644:	3001      	adds	r0, #1
 8002646:	d0ab      	beq.n	80025a0 <_printf_i+0x164>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	079b      	lsls	r3, r3, #30
 800264c:	d413      	bmi.n	8002676 <_printf_i+0x23a>
 800264e:	68e0      	ldr	r0, [r4, #12]
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	4298      	cmp	r0, r3
 8002654:	bfb8      	it	lt
 8002656:	4618      	movlt	r0, r3
 8002658:	e7a4      	b.n	80025a4 <_printf_i+0x168>
 800265a:	2301      	movs	r3, #1
 800265c:	4632      	mov	r2, r6
 800265e:	4649      	mov	r1, r9
 8002660:	4640      	mov	r0, r8
 8002662:	47d0      	blx	sl
 8002664:	3001      	adds	r0, #1
 8002666:	d09b      	beq.n	80025a0 <_printf_i+0x164>
 8002668:	3501      	adds	r5, #1
 800266a:	68e3      	ldr	r3, [r4, #12]
 800266c:	9903      	ldr	r1, [sp, #12]
 800266e:	1a5b      	subs	r3, r3, r1
 8002670:	42ab      	cmp	r3, r5
 8002672:	dcf2      	bgt.n	800265a <_printf_i+0x21e>
 8002674:	e7eb      	b.n	800264e <_printf_i+0x212>
 8002676:	2500      	movs	r5, #0
 8002678:	f104 0619 	add.w	r6, r4, #25
 800267c:	e7f5      	b.n	800266a <_printf_i+0x22e>
 800267e:	bf00      	nop
 8002680:	08002d29 	.word	0x08002d29
 8002684:	08002d3a 	.word	0x08002d3a

08002688 <_sbrk_r>:
 8002688:	b538      	push	{r3, r4, r5, lr}
 800268a:	4d06      	ldr	r5, [pc, #24]	; (80026a4 <_sbrk_r+0x1c>)
 800268c:	2300      	movs	r3, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	602b      	str	r3, [r5, #0]
 8002694:	f7fe f984 	bl	80009a0 <_sbrk>
 8002698:	1c43      	adds	r3, r0, #1
 800269a:	d102      	bne.n	80026a2 <_sbrk_r+0x1a>
 800269c:	682b      	ldr	r3, [r5, #0]
 800269e:	b103      	cbz	r3, 80026a2 <_sbrk_r+0x1a>
 80026a0:	6023      	str	r3, [r4, #0]
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	200000d4 	.word	0x200000d4

080026a8 <__sread>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	460c      	mov	r4, r1
 80026ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b0:	f000 fab2 	bl	8002c18 <_read_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bfab      	itete	ge
 80026b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026ba:	89a3      	ldrhlt	r3, [r4, #12]
 80026bc:	181b      	addge	r3, r3, r0
 80026be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026c2:	bfac      	ite	ge
 80026c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80026c6:	81a3      	strhlt	r3, [r4, #12]
 80026c8:	bd10      	pop	{r4, pc}

080026ca <__swrite>:
 80026ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ce:	461f      	mov	r7, r3
 80026d0:	898b      	ldrh	r3, [r1, #12]
 80026d2:	05db      	lsls	r3, r3, #23
 80026d4:	4605      	mov	r5, r0
 80026d6:	460c      	mov	r4, r1
 80026d8:	4616      	mov	r6, r2
 80026da:	d505      	bpl.n	80026e8 <__swrite+0x1e>
 80026dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e0:	2302      	movs	r3, #2
 80026e2:	2200      	movs	r2, #0
 80026e4:	f000 f9c8 	bl	8002a78 <_lseek_r>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	4632      	mov	r2, r6
 80026f6:	463b      	mov	r3, r7
 80026f8:	4628      	mov	r0, r5
 80026fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026fe:	f000 b869 	b.w	80027d4 <_write_r>

08002702 <__sseek>:
 8002702:	b510      	push	{r4, lr}
 8002704:	460c      	mov	r4, r1
 8002706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270a:	f000 f9b5 	bl	8002a78 <_lseek_r>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	bf15      	itete	ne
 8002714:	6560      	strne	r0, [r4, #84]	; 0x54
 8002716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800271a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800271e:	81a3      	strheq	r3, [r4, #12]
 8002720:	bf18      	it	ne
 8002722:	81a3      	strhne	r3, [r4, #12]
 8002724:	bd10      	pop	{r4, pc}

08002726 <__sclose>:
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 b8d3 	b.w	80028d4 <_close_r>
	...

08002730 <__swbuf_r>:
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002732:	460e      	mov	r6, r1
 8002734:	4614      	mov	r4, r2
 8002736:	4605      	mov	r5, r0
 8002738:	b118      	cbz	r0, 8002742 <__swbuf_r+0x12>
 800273a:	6983      	ldr	r3, [r0, #24]
 800273c:	b90b      	cbnz	r3, 8002742 <__swbuf_r+0x12>
 800273e:	f7ff fb81 	bl	8001e44 <__sinit>
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <__swbuf_r+0x98>)
 8002744:	429c      	cmp	r4, r3
 8002746:	d12b      	bne.n	80027a0 <__swbuf_r+0x70>
 8002748:	686c      	ldr	r4, [r5, #4]
 800274a:	69a3      	ldr	r3, [r4, #24]
 800274c:	60a3      	str	r3, [r4, #8]
 800274e:	89a3      	ldrh	r3, [r4, #12]
 8002750:	071a      	lsls	r2, r3, #28
 8002752:	d52f      	bpl.n	80027b4 <__swbuf_r+0x84>
 8002754:	6923      	ldr	r3, [r4, #16]
 8002756:	b36b      	cbz	r3, 80027b4 <__swbuf_r+0x84>
 8002758:	6923      	ldr	r3, [r4, #16]
 800275a:	6820      	ldr	r0, [r4, #0]
 800275c:	1ac0      	subs	r0, r0, r3
 800275e:	6963      	ldr	r3, [r4, #20]
 8002760:	b2f6      	uxtb	r6, r6
 8002762:	4283      	cmp	r3, r0
 8002764:	4637      	mov	r7, r6
 8002766:	dc04      	bgt.n	8002772 <__swbuf_r+0x42>
 8002768:	4621      	mov	r1, r4
 800276a:	4628      	mov	r0, r5
 800276c:	f000 f948 	bl	8002a00 <_fflush_r>
 8002770:	bb30      	cbnz	r0, 80027c0 <__swbuf_r+0x90>
 8002772:	68a3      	ldr	r3, [r4, #8]
 8002774:	3b01      	subs	r3, #1
 8002776:	60a3      	str	r3, [r4, #8]
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	6022      	str	r2, [r4, #0]
 800277e:	701e      	strb	r6, [r3, #0]
 8002780:	6963      	ldr	r3, [r4, #20]
 8002782:	3001      	adds	r0, #1
 8002784:	4283      	cmp	r3, r0
 8002786:	d004      	beq.n	8002792 <__swbuf_r+0x62>
 8002788:	89a3      	ldrh	r3, [r4, #12]
 800278a:	07db      	lsls	r3, r3, #31
 800278c:	d506      	bpl.n	800279c <__swbuf_r+0x6c>
 800278e:	2e0a      	cmp	r6, #10
 8002790:	d104      	bne.n	800279c <__swbuf_r+0x6c>
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f000 f933 	bl	8002a00 <_fflush_r>
 800279a:	b988      	cbnz	r0, 80027c0 <__swbuf_r+0x90>
 800279c:	4638      	mov	r0, r7
 800279e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <__swbuf_r+0x9c>)
 80027a2:	429c      	cmp	r4, r3
 80027a4:	d101      	bne.n	80027aa <__swbuf_r+0x7a>
 80027a6:	68ac      	ldr	r4, [r5, #8]
 80027a8:	e7cf      	b.n	800274a <__swbuf_r+0x1a>
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <__swbuf_r+0xa0>)
 80027ac:	429c      	cmp	r4, r3
 80027ae:	bf08      	it	eq
 80027b0:	68ec      	ldreq	r4, [r5, #12]
 80027b2:	e7ca      	b.n	800274a <__swbuf_r+0x1a>
 80027b4:	4621      	mov	r1, r4
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 f81e 	bl	80027f8 <__swsetup_r>
 80027bc:	2800      	cmp	r0, #0
 80027be:	d0cb      	beq.n	8002758 <__swbuf_r+0x28>
 80027c0:	f04f 37ff 	mov.w	r7, #4294967295
 80027c4:	e7ea      	b.n	800279c <__swbuf_r+0x6c>
 80027c6:	bf00      	nop
 80027c8:	08002cd8 	.word	0x08002cd8
 80027cc:	08002cf8 	.word	0x08002cf8
 80027d0:	08002cb8 	.word	0x08002cb8

080027d4 <_write_r>:
 80027d4:	b538      	push	{r3, r4, r5, lr}
 80027d6:	4d07      	ldr	r5, [pc, #28]	; (80027f4 <_write_r+0x20>)
 80027d8:	4604      	mov	r4, r0
 80027da:	4608      	mov	r0, r1
 80027dc:	4611      	mov	r1, r2
 80027de:	2200      	movs	r2, #0
 80027e0:	602a      	str	r2, [r5, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f7fe f88b 	bl	80008fe <_write>
 80027e8:	1c43      	adds	r3, r0, #1
 80027ea:	d102      	bne.n	80027f2 <_write_r+0x1e>
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	b103      	cbz	r3, 80027f2 <_write_r+0x1e>
 80027f0:	6023      	str	r3, [r4, #0]
 80027f2:	bd38      	pop	{r3, r4, r5, pc}
 80027f4:	200000d4 	.word	0x200000d4

080027f8 <__swsetup_r>:
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <__swsetup_r+0xcc>)
 80027fa:	b570      	push	{r4, r5, r6, lr}
 80027fc:	681d      	ldr	r5, [r3, #0]
 80027fe:	4606      	mov	r6, r0
 8002800:	460c      	mov	r4, r1
 8002802:	b125      	cbz	r5, 800280e <__swsetup_r+0x16>
 8002804:	69ab      	ldr	r3, [r5, #24]
 8002806:	b913      	cbnz	r3, 800280e <__swsetup_r+0x16>
 8002808:	4628      	mov	r0, r5
 800280a:	f7ff fb1b 	bl	8001e44 <__sinit>
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <__swsetup_r+0xd0>)
 8002810:	429c      	cmp	r4, r3
 8002812:	d10f      	bne.n	8002834 <__swsetup_r+0x3c>
 8002814:	686c      	ldr	r4, [r5, #4]
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800281c:	0719      	lsls	r1, r3, #28
 800281e:	d42c      	bmi.n	800287a <__swsetup_r+0x82>
 8002820:	06dd      	lsls	r5, r3, #27
 8002822:	d411      	bmi.n	8002848 <__swsetup_r+0x50>
 8002824:	2309      	movs	r3, #9
 8002826:	6033      	str	r3, [r6, #0]
 8002828:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800282c:	81a3      	strh	r3, [r4, #12]
 800282e:	f04f 30ff 	mov.w	r0, #4294967295
 8002832:	e03e      	b.n	80028b2 <__swsetup_r+0xba>
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <__swsetup_r+0xd4>)
 8002836:	429c      	cmp	r4, r3
 8002838:	d101      	bne.n	800283e <__swsetup_r+0x46>
 800283a:	68ac      	ldr	r4, [r5, #8]
 800283c:	e7eb      	b.n	8002816 <__swsetup_r+0x1e>
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <__swsetup_r+0xd8>)
 8002840:	429c      	cmp	r4, r3
 8002842:	bf08      	it	eq
 8002844:	68ec      	ldreq	r4, [r5, #12]
 8002846:	e7e6      	b.n	8002816 <__swsetup_r+0x1e>
 8002848:	0758      	lsls	r0, r3, #29
 800284a:	d512      	bpl.n	8002872 <__swsetup_r+0x7a>
 800284c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800284e:	b141      	cbz	r1, 8002862 <__swsetup_r+0x6a>
 8002850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002854:	4299      	cmp	r1, r3
 8002856:	d002      	beq.n	800285e <__swsetup_r+0x66>
 8002858:	4630      	mov	r0, r6
 800285a:	f000 f991 	bl	8002b80 <_free_r>
 800285e:	2300      	movs	r3, #0
 8002860:	6363      	str	r3, [r4, #52]	; 0x34
 8002862:	89a3      	ldrh	r3, [r4, #12]
 8002864:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002868:	81a3      	strh	r3, [r4, #12]
 800286a:	2300      	movs	r3, #0
 800286c:	6063      	str	r3, [r4, #4]
 800286e:	6923      	ldr	r3, [r4, #16]
 8002870:	6023      	str	r3, [r4, #0]
 8002872:	89a3      	ldrh	r3, [r4, #12]
 8002874:	f043 0308 	orr.w	r3, r3, #8
 8002878:	81a3      	strh	r3, [r4, #12]
 800287a:	6923      	ldr	r3, [r4, #16]
 800287c:	b94b      	cbnz	r3, 8002892 <__swsetup_r+0x9a>
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002888:	d003      	beq.n	8002892 <__swsetup_r+0x9a>
 800288a:	4621      	mov	r1, r4
 800288c:	4630      	mov	r0, r6
 800288e:	f000 f92b 	bl	8002ae8 <__smakebuf_r>
 8002892:	89a0      	ldrh	r0, [r4, #12]
 8002894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002898:	f010 0301 	ands.w	r3, r0, #1
 800289c:	d00a      	beq.n	80028b4 <__swsetup_r+0xbc>
 800289e:	2300      	movs	r3, #0
 80028a0:	60a3      	str	r3, [r4, #8]
 80028a2:	6963      	ldr	r3, [r4, #20]
 80028a4:	425b      	negs	r3, r3
 80028a6:	61a3      	str	r3, [r4, #24]
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	b943      	cbnz	r3, 80028be <__swsetup_r+0xc6>
 80028ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028b0:	d1ba      	bne.n	8002828 <__swsetup_r+0x30>
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	0781      	lsls	r1, r0, #30
 80028b6:	bf58      	it	pl
 80028b8:	6963      	ldrpl	r3, [r4, #20]
 80028ba:	60a3      	str	r3, [r4, #8]
 80028bc:	e7f4      	b.n	80028a8 <__swsetup_r+0xb0>
 80028be:	2000      	movs	r0, #0
 80028c0:	e7f7      	b.n	80028b2 <__swsetup_r+0xba>
 80028c2:	bf00      	nop
 80028c4:	2000000c 	.word	0x2000000c
 80028c8:	08002cd8 	.word	0x08002cd8
 80028cc:	08002cf8 	.word	0x08002cf8
 80028d0:	08002cb8 	.word	0x08002cb8

080028d4 <_close_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4d06      	ldr	r5, [pc, #24]	; (80028f0 <_close_r+0x1c>)
 80028d8:	2300      	movs	r3, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	f7fe f829 	bl	8000936 <_close>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d102      	bne.n	80028ee <_close_r+0x1a>
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	b103      	cbz	r3, 80028ee <_close_r+0x1a>
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	200000d4 	.word	0x200000d4

080028f4 <__sflush_r>:
 80028f4:	898a      	ldrh	r2, [r1, #12]
 80028f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028fa:	4605      	mov	r5, r0
 80028fc:	0710      	lsls	r0, r2, #28
 80028fe:	460c      	mov	r4, r1
 8002900:	d458      	bmi.n	80029b4 <__sflush_r+0xc0>
 8002902:	684b      	ldr	r3, [r1, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	dc05      	bgt.n	8002914 <__sflush_r+0x20>
 8002908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	dc02      	bgt.n	8002914 <__sflush_r+0x20>
 800290e:	2000      	movs	r0, #0
 8002910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002916:	2e00      	cmp	r6, #0
 8002918:	d0f9      	beq.n	800290e <__sflush_r+0x1a>
 800291a:	2300      	movs	r3, #0
 800291c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002920:	682f      	ldr	r7, [r5, #0]
 8002922:	602b      	str	r3, [r5, #0]
 8002924:	d032      	beq.n	800298c <__sflush_r+0x98>
 8002926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	075a      	lsls	r2, r3, #29
 800292c:	d505      	bpl.n	800293a <__sflush_r+0x46>
 800292e:	6863      	ldr	r3, [r4, #4]
 8002930:	1ac0      	subs	r0, r0, r3
 8002932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002934:	b10b      	cbz	r3, 800293a <__sflush_r+0x46>
 8002936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002938:	1ac0      	subs	r0, r0, r3
 800293a:	2300      	movs	r3, #0
 800293c:	4602      	mov	r2, r0
 800293e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002940:	6a21      	ldr	r1, [r4, #32]
 8002942:	4628      	mov	r0, r5
 8002944:	47b0      	blx	r6
 8002946:	1c43      	adds	r3, r0, #1
 8002948:	89a3      	ldrh	r3, [r4, #12]
 800294a:	d106      	bne.n	800295a <__sflush_r+0x66>
 800294c:	6829      	ldr	r1, [r5, #0]
 800294e:	291d      	cmp	r1, #29
 8002950:	d82c      	bhi.n	80029ac <__sflush_r+0xb8>
 8002952:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <__sflush_r+0x108>)
 8002954:	40ca      	lsrs	r2, r1
 8002956:	07d6      	lsls	r6, r2, #31
 8002958:	d528      	bpl.n	80029ac <__sflush_r+0xb8>
 800295a:	2200      	movs	r2, #0
 800295c:	6062      	str	r2, [r4, #4]
 800295e:	04d9      	lsls	r1, r3, #19
 8002960:	6922      	ldr	r2, [r4, #16]
 8002962:	6022      	str	r2, [r4, #0]
 8002964:	d504      	bpl.n	8002970 <__sflush_r+0x7c>
 8002966:	1c42      	adds	r2, r0, #1
 8002968:	d101      	bne.n	800296e <__sflush_r+0x7a>
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	b903      	cbnz	r3, 8002970 <__sflush_r+0x7c>
 800296e:	6560      	str	r0, [r4, #84]	; 0x54
 8002970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002972:	602f      	str	r7, [r5, #0]
 8002974:	2900      	cmp	r1, #0
 8002976:	d0ca      	beq.n	800290e <__sflush_r+0x1a>
 8002978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800297c:	4299      	cmp	r1, r3
 800297e:	d002      	beq.n	8002986 <__sflush_r+0x92>
 8002980:	4628      	mov	r0, r5
 8002982:	f000 f8fd 	bl	8002b80 <_free_r>
 8002986:	2000      	movs	r0, #0
 8002988:	6360      	str	r0, [r4, #52]	; 0x34
 800298a:	e7c1      	b.n	8002910 <__sflush_r+0x1c>
 800298c:	6a21      	ldr	r1, [r4, #32]
 800298e:	2301      	movs	r3, #1
 8002990:	4628      	mov	r0, r5
 8002992:	47b0      	blx	r6
 8002994:	1c41      	adds	r1, r0, #1
 8002996:	d1c7      	bne.n	8002928 <__sflush_r+0x34>
 8002998:	682b      	ldr	r3, [r5, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0c4      	beq.n	8002928 <__sflush_r+0x34>
 800299e:	2b1d      	cmp	r3, #29
 80029a0:	d001      	beq.n	80029a6 <__sflush_r+0xb2>
 80029a2:	2b16      	cmp	r3, #22
 80029a4:	d101      	bne.n	80029aa <__sflush_r+0xb6>
 80029a6:	602f      	str	r7, [r5, #0]
 80029a8:	e7b1      	b.n	800290e <__sflush_r+0x1a>
 80029aa:	89a3      	ldrh	r3, [r4, #12]
 80029ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b0:	81a3      	strh	r3, [r4, #12]
 80029b2:	e7ad      	b.n	8002910 <__sflush_r+0x1c>
 80029b4:	690f      	ldr	r7, [r1, #16]
 80029b6:	2f00      	cmp	r7, #0
 80029b8:	d0a9      	beq.n	800290e <__sflush_r+0x1a>
 80029ba:	0793      	lsls	r3, r2, #30
 80029bc:	680e      	ldr	r6, [r1, #0]
 80029be:	bf08      	it	eq
 80029c0:	694b      	ldreq	r3, [r1, #20]
 80029c2:	600f      	str	r7, [r1, #0]
 80029c4:	bf18      	it	ne
 80029c6:	2300      	movne	r3, #0
 80029c8:	eba6 0807 	sub.w	r8, r6, r7
 80029cc:	608b      	str	r3, [r1, #8]
 80029ce:	f1b8 0f00 	cmp.w	r8, #0
 80029d2:	dd9c      	ble.n	800290e <__sflush_r+0x1a>
 80029d4:	6a21      	ldr	r1, [r4, #32]
 80029d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80029d8:	4643      	mov	r3, r8
 80029da:	463a      	mov	r2, r7
 80029dc:	4628      	mov	r0, r5
 80029de:	47b0      	blx	r6
 80029e0:	2800      	cmp	r0, #0
 80029e2:	dc06      	bgt.n	80029f2 <__sflush_r+0xfe>
 80029e4:	89a3      	ldrh	r3, [r4, #12]
 80029e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ea:	81a3      	strh	r3, [r4, #12]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	e78e      	b.n	8002910 <__sflush_r+0x1c>
 80029f2:	4407      	add	r7, r0
 80029f4:	eba8 0800 	sub.w	r8, r8, r0
 80029f8:	e7e9      	b.n	80029ce <__sflush_r+0xda>
 80029fa:	bf00      	nop
 80029fc:	20400001 	.word	0x20400001

08002a00 <_fflush_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	690b      	ldr	r3, [r1, #16]
 8002a04:	4605      	mov	r5, r0
 8002a06:	460c      	mov	r4, r1
 8002a08:	b913      	cbnz	r3, 8002a10 <_fflush_r+0x10>
 8002a0a:	2500      	movs	r5, #0
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	bd38      	pop	{r3, r4, r5, pc}
 8002a10:	b118      	cbz	r0, 8002a1a <_fflush_r+0x1a>
 8002a12:	6983      	ldr	r3, [r0, #24]
 8002a14:	b90b      	cbnz	r3, 8002a1a <_fflush_r+0x1a>
 8002a16:	f7ff fa15 	bl	8001e44 <__sinit>
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <_fflush_r+0x6c>)
 8002a1c:	429c      	cmp	r4, r3
 8002a1e:	d11b      	bne.n	8002a58 <_fflush_r+0x58>
 8002a20:	686c      	ldr	r4, [r5, #4]
 8002a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ef      	beq.n	8002a0a <_fflush_r+0xa>
 8002a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a2c:	07d0      	lsls	r0, r2, #31
 8002a2e:	d404      	bmi.n	8002a3a <_fflush_r+0x3a>
 8002a30:	0599      	lsls	r1, r3, #22
 8002a32:	d402      	bmi.n	8002a3a <_fflush_r+0x3a>
 8002a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a36:	f7ff faa3 	bl	8001f80 <__retarget_lock_acquire_recursive>
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f7ff ff59 	bl	80028f4 <__sflush_r>
 8002a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a44:	07da      	lsls	r2, r3, #31
 8002a46:	4605      	mov	r5, r0
 8002a48:	d4e0      	bmi.n	8002a0c <_fflush_r+0xc>
 8002a4a:	89a3      	ldrh	r3, [r4, #12]
 8002a4c:	059b      	lsls	r3, r3, #22
 8002a4e:	d4dd      	bmi.n	8002a0c <_fflush_r+0xc>
 8002a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a52:	f7ff fa96 	bl	8001f82 <__retarget_lock_release_recursive>
 8002a56:	e7d9      	b.n	8002a0c <_fflush_r+0xc>
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <_fflush_r+0x70>)
 8002a5a:	429c      	cmp	r4, r3
 8002a5c:	d101      	bne.n	8002a62 <_fflush_r+0x62>
 8002a5e:	68ac      	ldr	r4, [r5, #8]
 8002a60:	e7df      	b.n	8002a22 <_fflush_r+0x22>
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <_fflush_r+0x74>)
 8002a64:	429c      	cmp	r4, r3
 8002a66:	bf08      	it	eq
 8002a68:	68ec      	ldreq	r4, [r5, #12]
 8002a6a:	e7da      	b.n	8002a22 <_fflush_r+0x22>
 8002a6c:	08002cd8 	.word	0x08002cd8
 8002a70:	08002cf8 	.word	0x08002cf8
 8002a74:	08002cb8 	.word	0x08002cb8

08002a78 <_lseek_r>:
 8002a78:	b538      	push	{r3, r4, r5, lr}
 8002a7a:	4d07      	ldr	r5, [pc, #28]	; (8002a98 <_lseek_r+0x20>)
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	4608      	mov	r0, r1
 8002a80:	4611      	mov	r1, r2
 8002a82:	2200      	movs	r2, #0
 8002a84:	602a      	str	r2, [r5, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f7fd ff7c 	bl	8000984 <_lseek>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d102      	bne.n	8002a96 <_lseek_r+0x1e>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	b103      	cbz	r3, 8002a96 <_lseek_r+0x1e>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
 8002a98:	200000d4 	.word	0x200000d4

08002a9c <__swhatbuf_r>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	460e      	mov	r6, r1
 8002aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	b096      	sub	sp, #88	; 0x58
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	461d      	mov	r5, r3
 8002aac:	da08      	bge.n	8002ac0 <__swhatbuf_r+0x24>
 8002aae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	602a      	str	r2, [r5, #0]
 8002ab6:	061a      	lsls	r2, r3, #24
 8002ab8:	d410      	bmi.n	8002adc <__swhatbuf_r+0x40>
 8002aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002abe:	e00e      	b.n	8002ade <__swhatbuf_r+0x42>
 8002ac0:	466a      	mov	r2, sp
 8002ac2:	f000 f8bb 	bl	8002c3c <_fstat_r>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	dbf1      	blt.n	8002aae <__swhatbuf_r+0x12>
 8002aca:	9a01      	ldr	r2, [sp, #4]
 8002acc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ad0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ad4:	425a      	negs	r2, r3
 8002ad6:	415a      	adcs	r2, r3
 8002ad8:	602a      	str	r2, [r5, #0]
 8002ada:	e7ee      	b.n	8002aba <__swhatbuf_r+0x1e>
 8002adc:	2340      	movs	r3, #64	; 0x40
 8002ade:	2000      	movs	r0, #0
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	b016      	add	sp, #88	; 0x58
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ae8 <__smakebuf_r>:
 8002ae8:	898b      	ldrh	r3, [r1, #12]
 8002aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002aec:	079d      	lsls	r5, r3, #30
 8002aee:	4606      	mov	r6, r0
 8002af0:	460c      	mov	r4, r1
 8002af2:	d507      	bpl.n	8002b04 <__smakebuf_r+0x1c>
 8002af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	6123      	str	r3, [r4, #16]
 8002afc:	2301      	movs	r3, #1
 8002afe:	6163      	str	r3, [r4, #20]
 8002b00:	b002      	add	sp, #8
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	ab01      	add	r3, sp, #4
 8002b06:	466a      	mov	r2, sp
 8002b08:	f7ff ffc8 	bl	8002a9c <__swhatbuf_r>
 8002b0c:	9900      	ldr	r1, [sp, #0]
 8002b0e:	4605      	mov	r5, r0
 8002b10:	4630      	mov	r0, r6
 8002b12:	f7ff fa57 	bl	8001fc4 <_malloc_r>
 8002b16:	b948      	cbnz	r0, 8002b2c <__smakebuf_r+0x44>
 8002b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b1c:	059a      	lsls	r2, r3, #22
 8002b1e:	d4ef      	bmi.n	8002b00 <__smakebuf_r+0x18>
 8002b20:	f023 0303 	bic.w	r3, r3, #3
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	81a3      	strh	r3, [r4, #12]
 8002b2a:	e7e3      	b.n	8002af4 <__smakebuf_r+0xc>
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <__smakebuf_r+0x7c>)
 8002b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b30:	89a3      	ldrh	r3, [r4, #12]
 8002b32:	6020      	str	r0, [r4, #0]
 8002b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b38:	81a3      	strh	r3, [r4, #12]
 8002b3a:	9b00      	ldr	r3, [sp, #0]
 8002b3c:	6163      	str	r3, [r4, #20]
 8002b3e:	9b01      	ldr	r3, [sp, #4]
 8002b40:	6120      	str	r0, [r4, #16]
 8002b42:	b15b      	cbz	r3, 8002b5c <__smakebuf_r+0x74>
 8002b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f000 f889 	bl	8002c60 <_isatty_r>
 8002b4e:	b128      	cbz	r0, 8002b5c <__smakebuf_r+0x74>
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	81a3      	strh	r3, [r4, #12]
 8002b5c:	89a0      	ldrh	r0, [r4, #12]
 8002b5e:	4305      	orrs	r5, r0
 8002b60:	81a5      	strh	r5, [r4, #12]
 8002b62:	e7cd      	b.n	8002b00 <__smakebuf_r+0x18>
 8002b64:	08001ddd 	.word	0x08001ddd

08002b68 <__malloc_lock>:
 8002b68:	4801      	ldr	r0, [pc, #4]	; (8002b70 <__malloc_lock+0x8>)
 8002b6a:	f7ff ba09 	b.w	8001f80 <__retarget_lock_acquire_recursive>
 8002b6e:	bf00      	nop
 8002b70:	200000c8 	.word	0x200000c8

08002b74 <__malloc_unlock>:
 8002b74:	4801      	ldr	r0, [pc, #4]	; (8002b7c <__malloc_unlock+0x8>)
 8002b76:	f7ff ba04 	b.w	8001f82 <__retarget_lock_release_recursive>
 8002b7a:	bf00      	nop
 8002b7c:	200000c8 	.word	0x200000c8

08002b80 <_free_r>:
 8002b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b82:	2900      	cmp	r1, #0
 8002b84:	d044      	beq.n	8002c10 <_free_r+0x90>
 8002b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b8a:	9001      	str	r0, [sp, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8002b92:	bfb8      	it	lt
 8002b94:	18e4      	addlt	r4, r4, r3
 8002b96:	f7ff ffe7 	bl	8002b68 <__malloc_lock>
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <_free_r+0x94>)
 8002b9c:	9801      	ldr	r0, [sp, #4]
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	b933      	cbnz	r3, 8002bb0 <_free_r+0x30>
 8002ba2:	6063      	str	r3, [r4, #4]
 8002ba4:	6014      	str	r4, [r2, #0]
 8002ba6:	b003      	add	sp, #12
 8002ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bac:	f7ff bfe2 	b.w	8002b74 <__malloc_unlock>
 8002bb0:	42a3      	cmp	r3, r4
 8002bb2:	d908      	bls.n	8002bc6 <_free_r+0x46>
 8002bb4:	6825      	ldr	r5, [r4, #0]
 8002bb6:	1961      	adds	r1, r4, r5
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	bf01      	itttt	eq
 8002bbc:	6819      	ldreq	r1, [r3, #0]
 8002bbe:	685b      	ldreq	r3, [r3, #4]
 8002bc0:	1949      	addeq	r1, r1, r5
 8002bc2:	6021      	streq	r1, [r4, #0]
 8002bc4:	e7ed      	b.n	8002ba2 <_free_r+0x22>
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	b10b      	cbz	r3, 8002bd0 <_free_r+0x50>
 8002bcc:	42a3      	cmp	r3, r4
 8002bce:	d9fa      	bls.n	8002bc6 <_free_r+0x46>
 8002bd0:	6811      	ldr	r1, [r2, #0]
 8002bd2:	1855      	adds	r5, r2, r1
 8002bd4:	42a5      	cmp	r5, r4
 8002bd6:	d10b      	bne.n	8002bf0 <_free_r+0x70>
 8002bd8:	6824      	ldr	r4, [r4, #0]
 8002bda:	4421      	add	r1, r4
 8002bdc:	1854      	adds	r4, r2, r1
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	6011      	str	r1, [r2, #0]
 8002be2:	d1e0      	bne.n	8002ba6 <_free_r+0x26>
 8002be4:	681c      	ldr	r4, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	6053      	str	r3, [r2, #4]
 8002bea:	4421      	add	r1, r4
 8002bec:	6011      	str	r1, [r2, #0]
 8002bee:	e7da      	b.n	8002ba6 <_free_r+0x26>
 8002bf0:	d902      	bls.n	8002bf8 <_free_r+0x78>
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	6003      	str	r3, [r0, #0]
 8002bf6:	e7d6      	b.n	8002ba6 <_free_r+0x26>
 8002bf8:	6825      	ldr	r5, [r4, #0]
 8002bfa:	1961      	adds	r1, r4, r5
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	bf04      	itt	eq
 8002c00:	6819      	ldreq	r1, [r3, #0]
 8002c02:	685b      	ldreq	r3, [r3, #4]
 8002c04:	6063      	str	r3, [r4, #4]
 8002c06:	bf04      	itt	eq
 8002c08:	1949      	addeq	r1, r1, r5
 8002c0a:	6021      	streq	r1, [r4, #0]
 8002c0c:	6054      	str	r4, [r2, #4]
 8002c0e:	e7ca      	b.n	8002ba6 <_free_r+0x26>
 8002c10:	b003      	add	sp, #12
 8002c12:	bd30      	pop	{r4, r5, pc}
 8002c14:	200000cc 	.word	0x200000cc

08002c18 <_read_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	4d07      	ldr	r5, [pc, #28]	; (8002c38 <_read_r+0x20>)
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4611      	mov	r1, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	602a      	str	r2, [r5, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7fd fe4c 	bl	80008c4 <_read>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_read_r+0x1e>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_read_r+0x1e>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	200000d4 	.word	0x200000d4

08002c3c <_fstat_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4d07      	ldr	r5, [pc, #28]	; (8002c5c <_fstat_r+0x20>)
 8002c40:	2300      	movs	r3, #0
 8002c42:	4604      	mov	r4, r0
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	602b      	str	r3, [r5, #0]
 8002c4a:	f7fd fe80 	bl	800094e <_fstat>
 8002c4e:	1c43      	adds	r3, r0, #1
 8002c50:	d102      	bne.n	8002c58 <_fstat_r+0x1c>
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	b103      	cbz	r3, 8002c58 <_fstat_r+0x1c>
 8002c56:	6023      	str	r3, [r4, #0]
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200000d4 	.word	0x200000d4

08002c60 <_isatty_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d06      	ldr	r5, [pc, #24]	; (8002c7c <_isatty_r+0x1c>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fd fe7f 	bl	800096e <_isatty>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_isatty_r+0x1a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_isatty_r+0x1a>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	200000d4 	.word	0x200000d4

08002c80 <_init>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr

08002c8c <_fini>:
 8002c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8e:	bf00      	nop
 8002c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c92:	bc08      	pop	{r3}
 8002c94:	469e      	mov	lr, r3
 8002c96:	4770      	bx	lr
